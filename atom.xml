<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Heew’s iOS Blog]]></title>
  <link href="http://heeween.github.io/atom.xml" rel="self"/>
  <link href="http://heeween.github.io/"/>
  <updated>2015-09-01T22:14:05+08:00</updated>
  <id>http://heeween.github.io/</id>
  <author>
    <name><![CDATA[Heew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[即时通讯技术]]></title>
    <link href="http://heeween.github.io/blog/2015-09-15-ji-shi-tong-xun-ji-zhu/"/>
    <updated>2015-09-15T15:33:41+08:00</updated>
    <id>http://heeween.github.io/blog/ji-shi-tong-xun-ji-zhu</id>
    <content type="html"><![CDATA[<h3>XMPP的现状</h3>

<p>XMPP是用来做即时通讯的一套即时通讯技术－IM</p>

<p>常见的应用如:QQ，微信，陌陌，比邻</p>

<p>目前国内的即时通讯领域，有向"垂直"发展的趋势</p>

<p>未来移动互联网应用，即时通讯有潜力的可发展的市场相对比较小，比较聚焦，聚集在某一个领域。</p>

<p>例如，淘宝－阿里旺旺,特别针对淘宝的特定人群提供卖家和买家的即时通讯－》讨价还价</p>

<h3>XMPP的意义</h3>

<p>XMPP诞生源于一个伟大的想法1998，让所有的即时通讯软件统一通讯协议，意味着所有的IM软件都能够互通！</p>

<p>学习XMPP的意义</p>

<ol>
<li>XMPP确实是可用的，google都用过，GTalk！</li>
<li>XMPP的协议定义中，几乎包含了所有的IM软件需要的功能
 注册，登录，发送文本消息，发送图片，发送语音，发送视频，管理名片，管理群组&hellip;</li>
<li>学习XMPP的开发，可以了解绝大多数IM软件应该包含哪些功能！</li>
</ol>


<p>－绝大多数掌握核心技术的，都不太愿意开源！</p>

<ol>
<li>如果自己要开发一个IM软件，学习XMPP框架是一个非常好的起点</li>
<li><p>目前国内开发IM的公司非常多
－新软件：内容取胜
－有了一定用户积累之后，需要做User Generate Content（用户生成内容）
－用户间的交流，针对某一个领域的交流</p></li>
<li><p>目前国内还有哪些解决方案
－环信，第三方框架，封装了非常多即时通讯的功能，使用起来比XMPP要方便很多！
＊是按照用户量来算钱的</p></li>
</ol>


<h3>利用推送做IM的特点：</h3>

<ol>
<li>及时性不好，消息会在服务器停留，通过APNs通知接收方，接收方连接服务器获取消息</li>
<li><p>所有的客户端都不需要跟服务器建立长连接
 例如：一个服务器能够支持的长连接1000，一个服务器上最多只能同时登录1000个人</p>

<p> 而使用推送方式，用户不需要和服务器建立长连接，服务器能够支持的用户数会大增
 意味着公司的硬件成本会急剧降低！</p></li>
</ol>


<p>利用推送而产生的即时通讯可以说是一种伪即时通讯！</p>

<h3>XMPP的数据格式</h3>

<p>XMPP －以发送"XML"格式的数据为基础的一套及时通讯协议</p>

<p>主要发送三类数据</p>

<p>1>  请求：用户登录，用户注册，添加好友
2>  展现：用户上线，用户下线
3>  消息：用户之间交流的信息（文本，图片，视频，语音&hellip;）</p>

<p>网络上传输的数据都是二进制的数据，二进制数据是以流的方式在网络上传输的！</p>

<p>在XMPP中，数据的传递，统一由XMPPStream来负责</p>

<h3>XMPP如何搭建服务器</h3>

<p>为什么要安装服务器？
1. Openfire->XMPP的服务器，基于java</p>

<p>负责用户登录，注册，发送消息。。。XMPP日常的功能</p>

<p>1>  首先安装JDK，因为java的程序是运行在虚拟机上的，没有jdk，就没有虚拟机
2>  安装Openfire
3>  打开管理控制器，进入管理页面 <a href="http://localhost:9090">http://localhost:9090</a></p>

<p>===> 告一段落</p>

<ol>
<li>数据库->MySQL</li>
</ol>


<p>负责保存用户记录</p>

<p>1>  安装MySQL
2>  重新打开系统偏要面板，能够看到MySQL的图标
3>  启动服务器
4>  设置MySQL的“管理员密码”
    原因：MySQL安装完成后，没有管理员密码，同时禁止从网络访问MySQL</p>

<p>终端</p>

<p>$ cd 数据库的目录（从Finder拖）
$ ./alias</p>

<p>重新启动终端，输入ls，如果发现目录变蓝，通常说明配置正确</p>

<p>郑重提示：脚本只需要运行一次就OK，一旦ls看到蓝色的目录，就不要再重复执行！</p>

<p>5>  配置phpMyadmin</p>

<p>1]  复制到Apache根目录
2］    将目录名修改为phpMyAdmin
3］ 将 config.sample.inc.php 复制，重命名为：config.inc.php
4］    打开config.inc.php
    将 localhost 改为 127.0.0.1</p>

<p>5]  启动apache服务器
$ sudo apachectl -k start</p>

<p>6]  打开浏览器，输入<a href="http://localhost">http://localhost</a>
7]  选择 phpMyAdmin，进入phpadmin的登录页面</p>

<p>8］    用户名：root
    口令：123456</p>

<p>9]  新建一个数据库
    名字：openfire
    排序规则：utf8_general_ci</p>

<p>10] 点击openfire（刚刚新建的空数据库）－》SQL（准备执行脚本，openfire所需要的脚本）</p>

<p>11］ 打开finder，进入目录 /usr/local</p>

<p>12] 允许管理员访问openfire文件夹
        在文件夹上，点击右键，选择“显示简介”在“共享与权限”
    －点锁头，输入密码
    －添加本机账号具有“读与写”的权限</p>

<p>13］ 进入 /usr/local/openfire/resources/database
        找到openfire_mysql.sql，并用Xcode 打开，cmd＋A， cmd ＋C</p>

<p>14］   回到safari，确认在SQL输入框中，cmd ＋v
        点击“执行”创建openfire服务器所需要的数据表</p>

<p>15］   点击左侧的openfire，确认数据库安装正确！</p>

<ol>
<li>配置openfire服务器</li>
</ol>


<p><em>1］   选择“简体中文”
2］    域"teacher.local"，非常非常重要！默认是自己"计算机的名称.local"
    提示：在系统偏好－共享中可以看到自己的计算机名称
3］    数据库设置“标准数据库连接”
</em>4］ <br/>
        －数据库驱动选项：MySQL
        －数据库的URL：jdbc:mysql://127.0.0.1:3306/openfire?rewriteBatchedStatements=true
        提示：修改主机名为127.0.0.1，数据库名称为：openfire
        －用户名：root(mysql的管理员用户名)
        －密码：123456
5］    直接继续
6］    输入xmpp管理员的初始密码：123456
    提示：千万不要点“跳过这一步”</p>

<p>……</p>

<p>登录到管理页面</p>

<p>用户名：admin
密码：123456(xmpp管理员的密码)</p>

<p>如果能够登录成功，说明服务器安装完成！</p>

<ol>
<li>新增用户</li>
</ol>


<p>1］    点击“用户／组”
2］    “新建用户”，设置带星号的内容即可</p>

<ol>
<li>配置客户端 iChat(iMessage)</li>
</ol>


<p>1］    添加用户，选择“其他”类型
2］ 账户类型：jabber
3］ 用户名：<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#116;&#101;&#x61;&#x63;&#x68;&#101;&#x72;&#46;&#108;&#111;&#99;&#97;&#x6c;">&#x61;&#100;&#109;&#x69;&#x6e;&#x40;&#116;&#x65;&#97;&#x63;&#104;&#x65;&#x72;&#x2e;&#108;&#111;&#x63;&#x61;&#108;</a> 123456
4］    信任证书</p>

<ol>
<li>小鸭子Adium_1.5.10</li>
</ol>


<p>客户端软件是开发XMPP应用时必备的工具！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS蓝牙4.0开发]]></title>
    <link href="http://heeween.github.io/blog/2015-05-29-ioslan-ya-4-dot-0kai-fa/"/>
    <updated>2015-05-29T13:19:08+08:00</updated>
    <id>http://heeween.github.io/blog/ioslan-ya-4-dot-0kai-fa</id>
    <content type="html"><![CDATA[<h4>小引</h4>

<p>随着穿戴设备和智能家居的热情不断，app蓝牙的开发也很火热，基于iOS蓝牙的开发资料有不少，但是最最值得学习的必然是apple自家的文档啦，我之前的项目基于蓝牙4.0，开发过程中用到Core Bluetooth框架，算是我学习的笔记吧！涉及到几个部分，我打算分开把他们整理出来，本篇文章通过对Core Bluetooth Programming Guide的翻译，为大家介绍iOS蓝牙4.0编程的一些术语和概念，后续文章将会简单介绍下代码的流程。本人实力有限，了解的深度不是很广，还请各位看官轻点拍砖！</p>

<p>话不多说说，让我们进入正题吧：</p>

<h4>核心蓝牙概述</h4>

<p>Core Bluetooth 框架使你的 Mac/iOS app 能够与低功耗蓝牙设备进行通讯。例如，你的app能够搜寻，探索低功耗蓝牙设备，并与之互动，如心率监听器，数字恒温器，甚至能够与其它iOS设备进行交互。</p>

<p>该框架基于BLE4.0规范，直接适用于蓝牙低功率设备的使用。也就是说，该框架隐藏了很多开发规范的底层实现细节，使您更容易开发出与蓝牙低功耗设备进行交互的app。因为该说明中涉及到蓝牙框架的一些概念和术语在本说明中已经被广泛采用，本文将向你介绍这个 Core Bluetooth 框架中的一些关键术语和概念。</p>

<p>Central 和 Peripheral 在蓝牙交互中的角色
所有涉及蓝牙低功耗的交互中有两个主要的角色：中心Central和外围设备Perpheral。根据一些传统的客户端-服务端结构，Peripheral通常具有其他设备所需要的数据，而Central通常通过使用Perpheral的信息来实现一些特定的功能。如下图所示，例如，一个心率监听器可能含有一些有用的信息，你的 Mac/iOS app 可能需要以用户友好的方式显示用户的心率。</p>

<p><img src="http://heeween.github.io/images/figure1-1.png" alt="" /></p>

<h4>Central 发现并连接广播中的 Peripheral</h4>

<p>Peripheral向外广播一些广告包形式的数据，广告包是一个相对较小的束，可能包含Peripheral提供的有用信息资料，如外设的名称和主要功能。例如，一个数字恒温器可以广告包含其中的一个房间的即时温度。在低功耗蓝牙中，广播是Peripheral被获知的主要方式。</p>

<p>从另一方面说，Central可以扫描和监听任何对广播内容感兴趣的Peripheral。如下图，Central可以请求连接任何已对外广播内容的Peripheral。</p>

<p><img src="http://heeween.github.io/images/figure1-2.png" alt="" /></p>

<h4>数据在 Peripheral 中如何构成</h4>

<p>连接到Peripheral的目的是为了对它所提供的数据进行探索和交互。在此之前，理解数据在Peripheral中是怎样构成的将会对我们有所帮助。</p>

<p>Peripheral包含一个或者多个Service以及有关其连接信号强度的有用信息。Service是指实现一个函数或者功能的设备（或者设备的一部分）的数据采集和相关行为的集合。例如，一个心率监听器的Service可能包含从监听心率传感器采集的心率数据。</p>

<p>而Service本身由Characteristic或者其他被包含的Service所组成。Characteristic提供了更多有关Peripheral的Service中的详细内容。例如，刚才描述的心率service中可以包含一个用来描述该设备的心率传感器所记录身体位置的characteristic或者包含发送测量心率数据的Characteristic。如下图，表示了一个心率监听器可能包含的Service和Characteristic。</p>

<p><img src="http://heeween.github.io/images/figure1-3.png" alt="" /></p>

<h4>Central 在 Peripheral 上的数据探索及交互</h4>

<p>在Central成功与Peripheral建立连接后，就能发现到Peripheral提供的所有的Service和Characteristic。(广播数据可能只包含一部分可见的Service)</p>

<p>Central可以通过读取或者写入Service中Characteristic的value与Peripheral进行交互。例如，你的 app 可能从数字恒温器上请求当前的室内温度，或者为恒温器提供一个数值以设置室内温度。</p>

<h4>Central,Peripherals 以及 Peripheral数据如何表示</h4>

<p>有关低功耗蓝牙交互中的主要角色和数据在Core Bluetooth中以简单明了的方式表示。</p>

<h4>Central 端的对象</h4>

<p>当你使用本地Central和远程Peripheral进行交互，您将在低功耗蓝牙Central侧执行操作。除非你是建立一个本地Peripheral设备，并使它由一个Central端请求响应，大多数的蓝牙交互由Central端完成。</p>

<h4>本地 Central 和远程 Peripheral</h4>

<p>在Central端，本地Central设备表示为CBCentralManager。这些对象用来管理发现或连接远程Peripheral设备(表示为CBPeripheral)，包括扫描，发现和连接广播中的Peripheral。如下图所示：</p>

<p><img src="http://heeween.github.io/images/figure1-4.png" alt="" /></p>

<h4>远程 Peripheral 数据表示为 CBService 和CBCharacteristic</h4>

<p>当你与远程Peripheral(表示为CBPeripheral)进行数据交互时，你将处理它的Service和Characteristic。在Core Bluetooth框架中，远程Peripheral的Service表示为CBService。相类似的，远程Peripheral中Service的Characteritic表示为CBCharacteristic。如下图所示：</p>

<p><img src="http://heeween.github.io/images/figure1-5.png" alt="" /></p>

<h4>Peripheral 端的对象</h4>

<p>OS X v10.9和iOS6以上的Mac/iOS设备能够可以设置成低功耗蓝牙的Peripheral，为其他Mac/iPhone/iPad 传输数据。当你设置好你的设备使其能够实现Peripheral的角色，你就可以完成低功耗蓝牙交互的Peripheral端功能。</p>

<h4>本地 Peripheral 和远程 Central</h4>

<p>在Peripheral端，一个Peripheral设备表示为CBPeripheralManager
。该对象用于管理那些包含本地Peripheral设备的Service和Characteristic数据的Service，通过广播这些服务的方式发布到远程Central设备(表示为CBCentral)。Peripheral manager对象同样可以响应远程Central的读取和写入请求。如下图所示：</p>

<p><img src="http://heeween.github.io/images/figure1-6.png" alt="" /></p>

<h4>本地 Peripheral 数据表示为 CBMutableService 和 CBMutableCharacteristic</h4>

<p>当你设置好和本地Peripheral(表示为CBPeripheralManager)数据交互，就可以处理Service和Characteristic的可变版本。在Core Bluetooth框架中，本地Peripheral的Service表示为CBMutableService。同样地，本地Peripheral中Service的Characteristic表示为CBMutableCharacteristic。如下图所示：</p>

<p><img src="http://heeween.github.io/images/figure1-7.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSScanner处理服务器数据异常、数据处理]]></title>
    <link href="http://heeween.github.io/blog/2015-05-11-nsscannerchu-li-fu-wu-qi-shu-ju-yi-chang-,-shu-ju-chu-li/"/>
    <updated>2015-05-11T14:53:13+08:00</updated>
    <id>http://heeween.github.io/blog/nsscannerchu-li-fu-wu-qi-shu-ju-yi-chang-,-shu-ju-chu-li</id>
    <content type="html"><![CDATA[<p>今天来介绍一下NSScanner, 并讲述一下如何使用这个东西来避免服务器传回的数组类型的数据错误的问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@class</span> <span class="bp">NSString</span>, <span class="bp">NSCharacterSet</span>, <span class="bp">NSDictionary</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="bp">NSScanner</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSUInteger</span> <span class="n">scanLocation</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSCharacterSet</span> <span class="o">*</span><span class="n">charactersToBeSkipped</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="kt">BOOL</span> <span class="n">caseSensitive</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">retain</span><span class="p">)</span> <span class="kt">id</span> <span class="n">locale</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span> <span class="n">NS_DESIGNATED_INITIALIZER</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="bp">NSScanner</span> <span class="nl">(NSExtendedScanner)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// On overflow, the below methods will return success and clamp</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanInt:</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanInteger:</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span> <span class="n">NS_AVAILABLE</span><span class="p">(</span><span class="mi">10</span><span class="n">_5</span><span class="p">,</span> <span class="mi">2</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanLongLong:</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanUnsignedLongLong:</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span> <span class="n">NS_AVAILABLE</span><span class="p">(</span><span class="mi">10</span><span class="n">_9</span><span class="p">,</span> <span class="mi">7</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanFloat:</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanDouble:</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanHexInt:</span><span class="p">(</span><span class="kt">unsigned</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>                                          <span class="c1">// Optionally prefixed with &quot;0x&quot; or &quot;0X&quot;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanHexLongLong:</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span> <span class="n">NS_AVAILABLE</span><span class="p">(</span><span class="mi">10</span><span class="n">_5</span><span class="p">,</span> <span class="mi">2</span><span class="n">_0</span><span class="p">);</span>   <span class="c1">// Optionally prefixed with &quot;0x&quot; or &quot;0X&quot;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanHexFloat:</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span> <span class="n">NS_AVAILABLE</span><span class="p">(</span><span class="mi">10</span><span class="n">_5</span><span class="p">,</span> <span class="mi">2</span><span class="n">_0</span><span class="p">);</span>                   <span class="c1">// Corresponding to %a or %A formatting. Requires &quot;0x&quot; or &quot;0X&quot; prefix.</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanHexDouble:</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span> <span class="n">NS_AVAILABLE</span><span class="p">(</span><span class="mi">10</span><span class="n">_5</span><span class="p">,</span> <span class="mi">2</span><span class="n">_0</span><span class="p">);</span>                 <span class="c1">// Corresponding to %a or %A formatting. Requires &quot;0x&quot; or &quot;0X&quot; prefix.</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span> <span class="nf">intoString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">**</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanCharactersFromSet:</span><span class="p">(</span><span class="bp">NSCharacterSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">set</span> <span class="nf">intoString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">**</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanUpToString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span> <span class="nf">intoString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">**</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">scanUpToCharactersFromSet:</span><span class="p">(</span><span class="bp">NSCharacterSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">set</span> <span class="nf">intoString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">**</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">getter</span><span class="o">=</span><span class="n">isAtEnd</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">atEnd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">scannerWithString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span><span class="p">;</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">localizedScannerWithString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先, 上边的NSScanner 主要的作用就是初始化一个NSScanner， 下边的扩展呢, 就是一些扫描的方式方法。 顾明思意的, 我们重点使用下边的scanUpToCharactersFromSet 还有主类中的属性charactersToBeSkipped.</p>

<h4>下边我们开实际的案例。</h4>

<p>1、在项目开发中, 很多数据都是用数组方式传输, 本地也使用数组方式添加, 通常我们避免添加出错会为数组加扩展SafeAdd等
但在实际开发中, 这种扩展反而不是很好使用, 我们推荐使用NSScanner来做这件事情。</p>

<p>e.g： 应该返回数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际返回错误的数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>明显的看到后边多一个, 因为服务器数据没有做兼容。 所以我们在本地处理的时候就要很小心。</p>

<p>使用NSScanner + 服务器解决办法, 服务器传字串, 比如： &ldquo;100,2,3,4,5&rdquo;, 本地接数据使用NSScanner处理。</p>

<p>E.g</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableCharacterSet</span> <span class="o">*</span><span class="n">whitespaceAndPunctuationSet</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableCharacterSet</span> <span class="n">punctuationCharacterSet</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">whitespaceAndPunctuationSet</span> <span class="nl">formUnionWithCharacterSet</span><span class="p">:[</span><span class="bp">NSCharacterSet</span> <span class="n">whitespaceAndNewlineCharacterSet</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSScanner</span> <span class="o">*</span><span class="n">stringScanner</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSScanner</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="s">@&quot;John &amp; Paul &amp; Ringo &amp; George.&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">stringScanner</span><span class="p">.</span><span class="n">charactersToBeSkipped</span> <span class="o">=</span> <span class="n">whitespaceAndPunctuationSet</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">([</span><span class="n">stringScanner</span> <span class="nl">scanUpToCharactersFromSet</span><span class="p">:</span><span class="n">whitespaceAndPunctuationSet</span> <span class="nl">intoString</span><span class="p">:</span><span class="o">&amp;</span><span class="n">name</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就可以通过NSScanner方便的处理我们接到的服务器数据。</p>

<p>同样 NSScanner还有很多使用的场景, 他可以方便我们处理很多固定类型的数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">price</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSScanner</span> <span class="o">*</span><span class="n">gasPriceScanner</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSScanner</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="s">@&quot;2.09 per gallon&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">gasPriceScanner</span> <span class="nl">scanDouble</span><span class="p">:</span><span class="o">&amp;</span><span class="n">price</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 2.09</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use a german locale instead of the default</span>
</span><span class='line'><span class="bp">NSScanner</span> <span class="o">*</span><span class="n">benzinPriceScanner</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSScanner</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="s">@&quot;1,38 pro Liter&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">benzinPriceScanner</span> <span class="nl">setLocale</span><span class="p">:[</span><span class="bp">NSLocale</span> <span class="nl">localeWithLocaleIdentifier</span><span class="p">:</span><span class="s">@&quot;de-DE&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">benzinPriceScanner</span> <span class="nl">scanDouble</span><span class="p">:</span><span class="o">&amp;</span><span class="n">price</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 1.38</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD的底层以及GCD的妙用]]></title>
    <link href="http://heeween.github.io/blog/2015-04-07-gcdde-di-ceng-yi-ji-gcdde-miao-yong/"/>
    <updated>2015-04-07T12:36:14+08:00</updated>
    <id>http://heeween.github.io/blog/gcdde-di-ceng-yi-ji-gcdde-miao-yong</id>
    <content type="html"><![CDATA[<p>虽然 GCD 已经出现过一段时间了，但不是每个人都明了其主要内容。这是可以理解的；并发一直很棘手，而 GCD 是基于 C 的 API ，它们就像一组尖锐的棱角戳进 Objective-C 的平滑世界。我们将分两个部分的教程来深入学习 GCD 。</p>

<p>在这两部分的系列中，第一个部分的将解释 GCD 是做什么的，并从许多基本的 GCD 函数中找出几个来展示。在第二部分，你将学到几个 GCD 提供的高级函数。</p>

<h4>什么是 GCD</h4>

<p>GCD 是 libdispatch 的市场名称，而 libdispatch 作为 Apple 的一个库，为并发代码在多核硬件（跑 iOS 或 OS X ）上执行提供有力支持。它具有以下优点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mf">1.</span><span class="n">GCD</span> <span class="err">能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能。</span>
</span><span class='line'><span class="mf">2.</span><span class="n">GCD</span> <span class="err">提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱。</span>
</span><span class='line'><span class="mf">3.</span><span class="n">GCD</span> <span class="err">具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。</span>
</span></code></pre></td></tr></table></div></figure>


<p>本教程假设你对 Block 和 GCD 有基础了解。如果你对 GCD 完全陌生，先看看 iOS 上的多线程和 GCD 入门教程 学习其要领。</p>

<h4>GCD 术语</h4>

<p>要理解 GCD ，你要先熟悉与线程和并发相关的几个概念。这两者都可能模糊和微妙，所以在开始 GCD 之前先简要地回顾一下它们。</p>

<h4>Serial vs. Concurrent 串行 vs. 并发</h4>

<p>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</p>

<p>虽然这些术语被广泛使用，本教程中你可以将任务设定为一个 Objective-C 的 Block 。不明白什么是 Block ？看看 iOS 5 教程中的如何使用 Block 。实际上，你也可以在 GCD 上使用函数指针，但在大多数场景中，这实际上更难于使用。Block 就是更加容易些！</p>

<h4>Synchronous vs. Asynchronous 同步 vs. 异步</h4>

<p>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。</p>

<p>一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。</p>

<p>注意——当你读到同步函数“阻塞（Block）”当前线程，或函数是一个“阻塞”函数或阻塞操作时，不要被搞糊涂了！动词“阻塞”描述了函数如何影响它所在的线程而与名词“代码块（Block）”没有关系。代码块描述了用 Objective-C 编写的一个匿名函数，它能定义一个任务并被提交到 GCD 。</p>

<p>译者注：中文不会有这个问题，“阻塞”和“代码块”是两个词。</p>

<h4>Critical Section 临界区</h4>

<p>就是一段代码不能被并发执行，也就是，两个线程不能同时执行这段代码。这很常见，因为代码去操作一个共享资源，例如一个变量若能被并发进程访问，那么它很可能会变质（译者注：它的值不再可信）。</p>

<h4>Race Condition 竞态条件</h4>

<p>这种状况是指基于特定序列或时机的事件的软件系统以不受控制的方式运行的行为，例如程序的并发任务执行的确切顺序。竞态条件可导致无法预测的行为，而不能通过代码检查立即发现。</p>

<h4>Deadlock 死锁</h4>

<p>两个（有时更多）东西——在大多数情况下，是线程——所谓的死锁是指它们都卡住了，并等待对方完成或执行其它操作。第一个不能完成是因为它在等待第二个的完成。但第二个也不能完成，因为它在等待第一个的完成。</p>

<h4>Thread Safe 线程安全</h4>

<p>线程安全的代码能在多线程或并发任务中被安全的调用，而不会导致任何问题（数据损坏，崩溃，等）。线程不安全的代码在某个时刻只能在一个上下文中运行。一个线程安全代码的例子是 NSDictionary 。你可以在同一时间在多个线程中使用它而不会有问题。另一方面，NSMutableDictionary 就不是线程安全的，应该保证一次只能有一个线程访问它。</p>

<h4>Context Switch 上下文切换</h4>

<p>一个上下文切换指当你在单个进程里切换执行不同的线程时存储与恢复执行状态的过程。这个过程在编写多任务应用时很普遍，但会带来一些额外的开销。</p>

<h4>Concurrency vs Parallelism 并发与并行</h4>

<p>并发和并行通常被一起提到，所以值得花些时间解释它们之间的区别。</p>

<p>并发代码的不同部分可以“同步”执行。然而，该怎样发生或是否发生都取决于系统。多核设备通过并行来同时执行多个线程；然而，为了使单核设备也能实现这一点，它们必须先运行一个线程，执行一个上下文切换，然后运行另一个线程或进程。这通常发生地足够快以致给我们并发执行地错觉，如下图所示：</p>

<p>虽然你可以编写代码在 GCD 下并发执行，但 GCD 会决定有多少并行的需求。并行要求并发，但并发并不能保证并行。</p>

<p>更深入的观点是并发实际上是关于构造。当你在脑海中用 GCD 编写代码，你组织你的代码来暴露能同时运行的多个工作片段，以及不能同时运行的那些。如果你想深入此主题，看看 this excellent talk by Rob Pike 。</p>

<h4>Queues 队列</h4>

<p>GCD 提供有 dispatch queues 来处理代码块，这些队列管理你提供给 GCD 的任务并用 FIFO 顺序执行这些任务。这就保证了第一个被添加到队列里的任务会是队列中第一个开始的任务，而第二个被添加的任务将第二个开始，如此直到队列的终点。</p>

<p>所有的调度队列（dispatch queues）自身都是线程安全的，你能从多个线程并行的访问它们。 GCD 的优点是显而易见的，即当你了解了调度队列如何为你自己代码的不同部分提供线程安全。关于这一点的关键是选择正确类型的调度队列和正确的调度函数来提交你的工作。</p>

<p>在本节你会看到两种调度队列，都是由 GCD 提供的，然后看一些描述如何用调度函数添加工作到队列的列子。</p>

<h4>Serial Queues 串行队列</h4>

<p>这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。</p>

<p>由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区。所以如果访问临界区的唯一方式是通过提交到调度队列的任务，那么你就不需要担心临界区的安全问题了。</p>

<h4>Concurrent Queues 并发队列</h4>

<p>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</p>

<p>下图展示了一个示例任务执行计划，GCD 管理着四个并发任务：</p>

<p>注意 Block 1,2 和 3 都立马开始运行，一个接一个。在 Block 0 开始后，Block 1等待了好一会儿才开始。同样， Block 3 在 Block 2 之后才开始，但它先于 Block 2 完成。</p>

<p>何时开始一个 Block 完全取决于 GCD 。如果一个 Block 的执行时间与另一个重叠，也是由 GCD 来决定是否将其运行在另一个不同的核心上，如果那个核心可用，否则就用上下文切换的方式来执行不同的 Block 。</p>

<p>有趣的是， GCD 提供给你至少五个特定的队列，可根据队列类型选择使用。</p>

<h4>Queue Types 队列类型</h4>

<p>首先，系统提供给你一个叫做 主队列（main queue） 的特殊队列。和其它串行队列一样，这个队列中的任务一次只能执行一个。然而，它能保证所有的任务都在主线程执行，而主线程是唯一可用于更新 UI 的线程。这个队列就是用于发生消息给 UIView 或发送通知的。</p>

<p>系统同时提供给你好几个并发队列。它们叫做 全局调度队列（Global Dispatch Queues） 。目前的四个全局队列有着不同的优先级：background、low、default 以及 high。要知道，Apple 的 API 也会使用这些队列，所以你添加的任何任务都不会是这些队列中唯一的任务。</p>

<p>最后，你也可以创建自己的串行队列或并发队列。这就是说，至少有五个队列任你处置：主队列、四个全局调度队列，再加上任何你自己创建的队列。</p>

<p>以上是调度队列的大框架！</p>

<p>GCD 的“艺术”归结为选择合适的队列来调度函数以提交你的工作。体验这一点的最好方式是走一遍下边的列子，我们沿途会提供一些一般性的建议。</p>

<p>入门
既然本教程的目标是优化且安全的使用 GCD 调用来自不同线程的代码，那么你将从一个近乎完成的叫做 GooglyPuff 的项目入手。</p>

<p>GooglyPuff 是一个没有优化，线程不安全的应用，它使用 Core Image 的人脸检测 API 来覆盖一对曲棍球眼睛到被检测到的人脸上。对于基本的图像，可以从相机胶卷选择，或用预设好的URL从互联网下载。</p>

<p>完成项目下载之后，将其解压到某个方便的目录，再用 Xcode 打开它并编译运行。这个应用看起来如下图所示：</p>

<p>注意当你选择 Le Internet 选项下载图片时，一个 UIAlertView 过早地弹出。你将在本系列教程地第二部分修复这个问题。</p>

<p>这个项目中有四个有趣的类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mf">1.</span> <span class="n">PhotoCollectionViewController</span><span class="err">：它是应用开始的第一个视图控制器。它用缩略图展示所有选定的照片。</span>
</span><span class='line'><span class="mf">2.</span> <span class="n">PhotoDetailViewController</span><span class="err">：它执行添加曲棍球眼睛到图像上的逻辑，并用一个</span> <span class="bp">UIScrollView</span> <span class="err">来显示结果图片。</span>
</span><span class='line'><span class="mf">3.</span> <span class="n">Photo</span><span class="err">：这是一个类簇，它根据一个</span> <span class="bp">NSURL</span> <span class="err">的实例或一个</span> <span class="bp">ALAsset</span> <span class="err">的实例来实例化照片。这个类提供一个图像、缩略图以及从</span> <span class="n">URL</span> <span class="err">下载的状态。</span>
</span><span class='line'><span class="mf">4.</span> <span class="n">PhotoManager</span><span class="err">：它管理所有</span> <span class="n">Photo</span> <span class="err">的实例</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h4>用 dispatch_async 处理后台任务</h4>

<p>回到应用并从你的相机胶卷添加一些照片或使用 Le Internet 选项下载一些。</p>

<p>注意在按下 PhotoCollectionViewController 中的一个 UICollectionViewCell 到生成一个新的 PhotoDetailViewController 之间花了多久时间；你会注意到一个明显的滞后，特别是在比较慢的设备上查看很大的图。</p>

<p>在重载 UIViewController 的 viewDidLoad 时容易加入太多杂波（too much clutter），这通常会引起视图控制器出现前更长的等待。如果可能，最好是卸下一些工作放到后台，如果它们不是绝对必须要运行在加载时间里。</p>

<p>这听起来像是 dispatch_async 能做的事情！</p>

<p>打开 PhotoDetailViewController 并用下面的实现替换 viewDidLoad ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">_image</span><span class="p">,</span> <span class="s">@&quot;Image not set; required to use view controller&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">photoImageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">_image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Resize if neccessary to ensure it&#39;s not pixelated </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">&lt;=</span> <span class="nb">self</span><span class="p">.</span><span class="n">photoImageView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">_image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;=</span> <span class="nb">self</span><span class="p">.</span><span class="n">photoImageView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">photoImageView</span> <span class="nl">setContentMode</span><span class="p">:</span><span class="n">UIViewContentModeCenter</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 1 </span>
</span><span class='line'>        <span class="bp">UIImage</span> <span class="o">*</span><span class="n">overlayImage</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">faceOverlayImageFromImage</span><span class="p">:</span><span class="n">_image</span><span class="p">];</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 2 </span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span> <span class="nl">fadeInNewImage</span><span class="p">:</span><span class="n">overlayImage</span><span class="p">];</span> <span class="c1">// 3 </span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
下面来说明上面的新代码所做的事：</p>

<ol>
<li>你首先将工作从主线程移到全局线程。因为这是一个 dispatch_async() ，Block 会被异步地提交，意味着调用线程地执行将会继续。这就使得 viewDidLoad 更早地在主线程完成，让加载过程感觉起来更加快速。同时，一个人脸检测过程会启动并将在稍后完成。</li>
<li>在这里，人脸检测过程完成，并生成了一个新的图像。既然你要使用此新图像更新你的 UIImageView ，那么你就添加一个新的 Block 到主线程。记住——你必须总是在主线程访问 UIKit 的类。</li>
<li>最后，你用 fadeInNewImage: 更新 UI ，它执行一个淡入过程切换到新的曲棍球眼睛图像。
编译并运行你的应用；选择一个图像然后你会注意到视图控制器加载明显变快，曲棍球眼睛稍微在之后就加上了。这给应用带来了不错的效果，和之前的显示差别巨大。</li>
</ol>


<p>进一步，如果你试着加载一个超大的图像，应用不会在加载视图控制器上“挂住”，这就使得应用具有很好伸缩性。</p>

<p>正如之前提到的， dispatch_async 添加一个 Block 都队列就立即返回了。任务会在之后由 GCD 决定执行。当你需要在后台执行一个基于网络或 CPU 紧张的任务时就使用 dispatch_async ，这样就不会阻塞当前线程。</p>

<p>下面是一个关于在 dispatch_async 上如何以及何时使用不同的队列类型的快速指导：
1. 自定义串行队列：当你想串行执行后台任务并追踪它时就是一个好选择。这消除了资源争用，因为你知道一次只有一个任务在执行。注意若你需要来自某个方法的数据，你必须内联另一个 Block 来找回它或考虑使用 dispatch_sync。
2. 主队列（串行）：这是在一个并发队列上完成任务后更新 UI 的共同选择。要这样做，你将在一个 Block 内部编写另一个 Block 。以及，如果你在主队列调用 dispatch_async 到主队列，你能确保这个新任务将在当前方法完成后的某个时间执行。
3. 并发队列：这是在后台执行非 UI 工作的共同选择。</p>

<p>使用 dispatch_after 延后工作
稍微考虑一下应用的 UX 。是否用户第一次打开应用时会困惑于不知道做什么？你是这样吗？ :]</p>

<p>如果用户的 PhotoManager 里还没有任何照片，那么显示一个提示会是个好主意！然而，你同样要考虑用户的眼睛会如何在主屏幕上浏览：如果你太快的显示一个提示，他们的眼睛还徘徊在视图的其它部分上，他们很可能会错过它。</p>

<p>显示提示之前延迟一秒钟就足够捕捉到用户的注意，他们此时已经第一次看过了应用。</p>

<p>添加如下代码到到 PhotoCollectionViewController.m 中 showOrHideNavPrompt 的废止实现里：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showOrHideNavPrompt</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSUInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="n">photos</span><span class="p">].</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">delayInSeconds</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">dispatch_time_t</span> <span class="n">popTime</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="n">delayInSeconds</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">));</span> <span class="c1">// 1  </span>
</span><span class='line'>    <span class="n">dispatch_after</span><span class="p">(</span><span class="n">popTime</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="c1">// 2  </span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span> <span class="nl">setPrompt</span><span class="p">:</span><span class="s">@&quot;Add photos with faces to Googlyify them!&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span> <span class="nl">setPrompt</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
showOrHideNavPrompt 在 viewDidLoad 中执行，以及 UICollectionView 被重新加载的任何时候。按照注释数字顺序看看：
1. 你声明了一个变量指定要延迟的时长。
2. 然后等待 delayInSeconds 给定的时长，再异步地添加一个 Block 到主线程。</p>

<p>编译并运行应用。应该有一个轻微地延迟，这有助于抓住用户的注意力并展示所要做的事情。</p>

<p>dispatch_after 工作起来就像一个延迟版的 dispatch_async 。你依然不能控制实际的执行时间，且一旦 dispatch_after 返回也就不能再取消它。</p>

<p>不知道何时适合使用 dispatch_after ？
1. 自定义串行队列：在一个自定义串行队列上使用 dispatch_after 要小心。你最好坚持使用主队列。
2. 主队列（串行）：是使用 dispatch_after 的好选择；Xcode 提供了一个不错的自动完成模版。
3. 并发队列：在并发队列上使用 dispatch_after 也要小心；你会这样做就比较罕见。还是在主队列做这些操作吧。</p>

<p>让你的单例线程安全
单例，不论喜欢还是讨厌，它们在 iOS 上的流行情况就像网上的猫。 :]</p>

<p>一个常见的担忧是它们常常不是线程安全的。这个担忧十分合理，基于它们的用途：单例常常被多个控制器同时访问。</p>

<p>单例的线程担忧范围从初始化开始，到信息的读和写。PhotoManager 类被实现为单例——它在目前的状态下就会被这些问题所困扰。要看看事情如何很快地失去控制，你将在单例实例上创建一个控制好的竞态条件。</p>

<p>导航到 PhotoManager.m 并找到 sharedManager ；它看起来如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PhotoManager</span> <span class="o">*</span><span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sharedPhotoManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span><span class="o">-&gt;</span><span class="n">_photosArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedPhotoManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
当前状态下，代码相当简单；你创建了一个单例并初始化一个叫做 photosArray 的 NSMutableArray 属性。</p>

<p>然而，if 条件分支不是线程安全的；如果你多次调用这个方法，有一个可能性是在某个线程（就叫它线程A）上进入 if 语句块并可能在 sharedPhotoManager 被分配内存前发生一个上下文切换。然后另一个线程（线程B）可能进入 if ，分配单例实例的内存，然后退出。</p>

<p>当系统上下文切换回线程A，你会分配另外一个单例实例的内存，然后退出。在那个时间点，你有了两个单例的实例——很明显这不是你想要的（译者注：这还能叫单例吗？）！</p>

<p>要强制这个（竞态）条件发生，替换 PhotoManager.m 中的 sharedManager 为下面的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PhotoManager</span> <span class="o">*</span><span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sharedPhotoManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Singleton has memory address at: %@&quot;</span><span class="p">,</span> <span class="n">sharedPhotoManager</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span><span class="o">-&gt;</span><span class="n">_photosArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedPhotoManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
上面的代码中你用 NSThread 的 sleepForTimeInterval: 类方法来强制发生一个上下文切换。</p>

<p>打开 AppDelegate.m 并添加如下代码到 application:didFinishLaunchingWithOptions: 的最开始处：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里创建了多个异步并发调用来实例化单例，然后引发上面描述的竞态条件。</p>

<p>编译并运行项目；查看控制台输出，你会看到多个单例被实例化，如下所示：</p>

<p>注意到这里有好几行显示着不同地址的单例实例。这明显违背了单例的目的，对吧？</p>

<p>这个输出向你展示了临界区被执行多次，而它只应该执行一次。现在，固然是你自己强制这样的状况发生，但你可以想像一下这个状况会怎样在无意间发生。</p>

<p>注意：基于其它你无法控制的系统事件，NSLog 的数量有时会显示多个。线程问题极其难以调试，因为它们往往难以重现。
要纠正这个状况，实例化代码应该只执行一次，并阻塞其它实例在 if 条件的临界区运行。这刚好就是 dispatch_once 能做的事。</p>

<p>在单例初始化方法中用 dispatch_once 取代 if 条件判断，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PhotoManager</span> <span class="o">*</span><span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Singleton has memory address at: %@&quot;</span><span class="p">,</span> <span class="n">sharedPhotoManager</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">NSThread</span> <span class="nl">sleepForTimeInterval</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span><span class="o">-&gt;</span><span class="n">_photosArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedPhotoManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
编译并运行你的应用；查看控制台输出，你会看到有且仅有一个单例的实例——这就是你对单例的期望！:]</p>

<p>现在你已经明白了防止竞态条件的重要性，从 AppDelegate.m 中移除 dispatch_async 语句，并用下面的实现替换 PhotoManager 单例的初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PhotoManager</span> <span class="o">*</span><span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span><span class="o">-&gt;</span><span class="n">_photosArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedPhotoManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
dispatch_once() 以线程安全的方式执行且仅执行其代码块一次。试图访问临界区（即传递给 dispatch_once 的代码）的不同的线程会在临界区已有一个线程的情况下被阻塞，直到临界区完成为止。</p>

<p>需要记住的是，这只是让访问共享实例线程安全。它绝对没有让类本身线程安全。类中可能还有其它竞态条件，例如任何操纵内部数据的情况。这些需要用其它方式来保证线程安全，例如同步访问数据，你将在下面几个小节看到。</p>

<p>处理读者与写者问题
线程安全实例不是处理单例时的唯一问题。如果单例属性表示一个可变对象，那么你就需要考虑是否那个对象自身线程安全。</p>

<p>如果问题中的这个对象是一个 Foundation 容器类，那么答案是——“很可能不安全”！Apple 维护一个有用且有些心寒的列表，众多的 Foundation 类都不是线程安全的。 NSMutableArray，已用于你的单例，正在那个列表里休息。</p>

<p>虽然许多线程可以同时读取 NSMutableArray 的一个实例而不会产生问题，但当一个线程正在读取时让另外一个线程修改数组就是不安全的。你的单例在目前的状况下不能预防这种情况的发生。</p>

<p>要分析这个问题，看看 PhotoManager.m 中的 addPhoto:，转载如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addPhoto:</span><span class="p">(</span><span class="n">Photo</span> <span class="o">*</span><span class="p">)</span><span class="nv">photo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">photo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_photosArray</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">photo</span><span class="p">];</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span> <span class="n">postContentAddedNotification</span><span class="p">];</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这是一个写方法，它修改一个私有可变数组对象。</p>

<p>现在看看 photos ，转载如下：
- (NSArray *)photos
{
  return [NSArray arrayWithArray:_photosArray];
}</p>

<p>这是所谓的读方法，它读取可变数组。它为调用者生成一个不可变的拷贝，防止调用者不当地改变数组，但这不能提供任何保护来对抗当一个线程调用读方法 photos 的同时另一个线程调用写方法 addPhoto: 。</p>

<p>这就是软件开发中经典的读者写者问题。GCD 通过用 dispatch barriers 创建一个读者写者锁 提供了一个优雅的解决方案。</p>

<p>Dispatch barriers 是一组函数，在并发队列上工作时扮演一个串行式的瓶颈。使用 GCD 的障碍（barrier）API 确保提交的 Block 在那个特定时间上是指定队列上唯一被执行的条目。这就意味着所有的先于调度障碍提交到队列的条目必能在这个 Block 执行前完成。</p>

<p>当这个 Block 的时机到达，调度障碍执行这个 Block 并确保在那个时间里队列不会执行任何其它 Block 。一旦完成，队列就返回到它默认的实现状态。 GCD 提供了同步和异步两种障碍函数。</p>

<p>下图显示了障碍函数对多个异步队列的影响：</p>

<p>注意到正常部分的操作就如同一个正常的并发队列。但当障碍执行时，它本质上就如同一个串行队列。也就是，障碍是唯一在执行的事物。在障碍完成后，队列回到一个正常并发队列的样子。</p>

<p>下面是你何时会——和不会——使用障碍函数的情况：
1. 自定义串行队列：一个很坏的选择；障碍不会有任何帮助，因为不管怎样，一个串行队列一次都只执行一个操作。
2. 全局并发队列：要小心；这可能不是最好的主意，因为其它系统可能在使用队列而且你不能垄断它们只为你自己的目的。
3. 自定义并发队列：这对于原子或临界区代码来说是极佳的选择。任何你在设置或实例化的需要线程安全的事物都是使用障碍的最佳候选。</p>

<p>由于上面唯一像样的选择是自定义并发队列，你将创建一个你自己的队列去处理你的障碍函数并分开读和写函数。且这个并发队列将允许多个多操作同时进行。</p>

<p>打开 PhotoManager.m，添加如下私有属性到类扩展中：
@interface PhotoManager ()
@property (nonatomic,strong,readonly) NSMutableArray *photosArray;
@property (nonatomic, strong) dispatch_queue_t concurrentPhotoQueue; ///&lt; Add this
@end</p>

<p>找到 addPhoto: 并用下面的实现替换它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addPhoto:</span><span class="p">(</span><span class="n">Photo</span> <span class="o">*</span><span class="p">)</span><span class="nv">photo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">photo</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 1 </span>
</span><span class='line'>        <span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">concurrentPhotoQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 2  </span>
</span><span class='line'>            <span class="p">[</span><span class="n">_photosArray</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">photo</span><span class="p">];</span> <span class="c1">// 3 </span>
</span><span class='line'>            <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 4 </span>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span> <span class="n">postContentAddedNotification</span><span class="p">];</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你新写的函数是这样工作的：
1. 在执行下面所有的工作前检查是否有合法的相片。
2. 添加写操作到你的自定义队列。当临界区在稍后执行时，这将是你队列中唯一执行的条目。
3. 这是添加对象到数组的实际代码。由于它是一个障碍 Block ，这个 Block 永远不会同时和其它 Block 一起在 concurrentPhotoQueue 中执行。
4. 最后你发送一个通知说明完成了添加图片。这个通知将在主线程被发送因为它将会做一些 UI 工作，所以在此为了通知，你异步地调度另一个任务到主线程。
这就处理了写操作，但你还需要实现 photos 读方法并实例化 concurrentPhotoQueue 。</p>

<p>在写者打扰的情况下，要确保线程安全，你需要在 concurrentPhotoQueue 队列上执行读操作。既然你需要从函数返回，你就不能异步调度到队列，因为那样在读者函数返回之前不一定运行。</p>

<p>在这种情况下，dispatch_sync 就是一个绝好的候选。</p>

<p>dispatch_sync() 同步地提交工作并在返回前等待它完成。使用 dispatch_sync 跟踪你的调度障碍工作，或者当你需要等待操作完成后才能使用 Block 处理过的数据。如果你使用第二种情况做事，你将不时看到一个 __block 变量写在 dispatch_sync 范围之外，以便返回时在 dispatch_sync 使用处理过的对象。</p>

<p>但你需要很小心。想像如果你调用 dispatch_sync 并放在你已运行着的当前队列。这会导致死锁，因为调用会一直等待直到 Block 完成，但 Block 不能完成（它甚至不会开始！），直到当前已经存在的任务完成，而当前任务无法完成！这将迫使你自觉于你正从哪个队列调用——以及你正在传递进入哪个队列。</p>

<p>下面是一个快速总览，关于在何时以及何处使用 dispatch_sync ：
1. 自定义串行队列：在这个状况下要非常小心！如果你正运行在一个队列并调用 dispatch_sync 放在同一个队列，那你就百分百地创建了一个死锁。
2. 主队列（串行）：同上面的理由一样，必须非常小心！这个状况同样有潜在的导致死锁的情况。
3. 并发队列：这才是做同步工作的好选择，不论是通过调度障碍，或者需要等待一个任务完成才能执行进一步处理的情况。</p>

<p>继续在 PhotoManager.m 上工作，用下面的实现替换 photos ：
- (NSArray <em>)photos
{
    __block NSArray </em>array; // 1
    dispatch_sync(self.concurrentPhotoQueue, ^{ // 2
        array = [NSArray arrayWithArray:_photosArray]; // 3
    });
    return array;
}</p>

<p>这就是你的读函数。按顺序看看编过号的注释，有这些：
1. __block 关键字允许对象在 Block 内可变。没有它，array 在 Block 内部就只是只读的，你的代码甚至不能通过编译。
2. 在 concurrentPhotoQueue 上同步调度来执行读操作。
3. 将相片数组存储在 array 内并返回它。</p>

<p>最后，你需要实例化你的 concurrentPhotoQueue 属性。修改 sharedManager 以便像下面这样初始化队列：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">PhotoManager</span> <span class="o">*</span><span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span><span class="o">-&gt;</span><span class="n">_photosArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ADD THIS: </span>
</span><span class='line'>        <span class="n">sharedPhotoManager</span><span class="o">-&gt;</span><span class="n">_concurrentPhotoQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.selander.GooglyPuff.photoQueue&quot;</span><span class="p">,</span>
</span><span class='line'>                                                    <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedPhotoManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用 dispatch_queue_create 初始化 concurrentPhotoQueue 为一个并发队列。第一个参数是反向DNS样式命名惯例；确保它是描述性的，将有助于调试。第二个参数指定你的队列是串行还是并发。</p>

<p>注意：当你在网上搜索例子时，你会经常看人们传递 0 或者 NULL 给 dispatch_queue_create 的第二个参数。这是一个创建串行队列的过时方式；明确你的参数总是更好。
恭喜——你的 PhotoManager 单例现在是线程安全的了。不论你在何处或怎样读或写你的照片，你都有这样的自信，即它将以安全的方式完成，不会出现任何惊吓。</p>

<p>A Visual Review of Queueing 队列的虚拟回顾
依然没有 100% 地掌握 GCD 的要领？确保你可以使用 GCD 函数轻松地创建简单的例子，使用断点和 NSLog 语句保证自己明白当下发生的情况。</p>

<p>我在下面提供了两个 GIF动画来帮助你巩固对 dispatch_async 和 dispatch_sync 的理解。包含在每个 GIF 中的代码可以提供视觉辅助；仔细注意 GIF 左边显示代码断点的每一步，以及右边相关队列的状态。</p>

<p>dispatch_sync 回顾</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;First Log&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Second Log&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>下面是图中几个步骤的说明：
1. 主队列一路按顺序执行任务——接着是一个实例化 UIViewController 的任务，其中包含了 viewDidLoad 。
2. viewDidLoad 在主线程执行。
3. 主线程目前在 viewDidLoad 内，正要到达 dispatch_sync 。
4. dispatch_sync Block 被添加到一个全局队列中，将在稍后执行。进程将在主线程挂起直到该 Block 完成。同时，全局队列并发处理任务；要记得 Block 在全局队列中将按照 FIFO 顺序出列，但可以并发执行。
5. 全局队列处理 dispatch_sync Block 加入之前已经出现在队列中的任务。
6. 终于，轮到 dispatch_sync Block 。
7. 这个 Block 完成，因此主线程上的任务可以恢复。
8. viewDidLoad 方法完成，主队列继续处理其他任务。</p>

<p>dispatch_sync 添加任务到一个队列并等待直到任务完成。dispatch_async 做类似的事情，但不同之处是它不会等待任务的完成，而是立即继续“调用线程”的其它任务。</p>

<p>dispatch_async 回顾</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;First Log&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Second Log&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1.主队列一路按顺序执行任务——接着是一个实例化 UIViewController 的任务，其中包含了 viewDidLoad 。
2. viewDidLoad 在主线程执行。
3.主线程目前在 viewDidLoad 内，正要到达 dispatch_async 。
4.dispatch_async Block 被添加到一个全局队列中，将在稍后执行。
5.viewDidLoad 在添加 dispatch_async 到全局队列后继续进行，主线程把注意力转向剩下的任务。同时，全局队列并发地处理它未完成地任务。记住 Block 在全局队列中将按照 FIFO 顺序出列，但可以并发执行。
6.添加到 dispatch_async 的代码块开始执行。
7.dispatch_async Block 完成，两个 NSLog 语句将它们的输出放在控制台上。</p>

<p>在这个特定的实例中，第二个 NSLog 语句执行，跟着是第一个 NSLog 语句。并不总是这样——着取决于给定时刻硬件正在做的事情，而且你无法控制或知晓哪个语句会先执行。“第一个” NSLog 在某些调用情况下会第一个执行。</p>

<p>下一步怎么走？
在本教程中，你学习了如何让你的代码线程安全，以及在执行 CPU 密集型任务时如何保持主线程的响应性。</p>

<p>你可以下载 GooglyPuff 项目，它包含了目前所有本教程中编写的实现。在本教程的第二部分，你将继续改进这个项目。</p>

<p>如果你计划优化你自己的应用，那你应该用 Instruments 中的 Time Profile 模版分析你的工作。对这个工具的使用超出了本教程的范围，你可以看看 如何使用Instruments 来得到一个很好的概述。</p>

<p>同时请确保在真实设备上分析，而在模拟器上测试会对程序速度产生非常不准确的印象。</p>

<p>在教程的下一部分，你将更加深入到 GCD 的 API 中，做一些更 Cool 的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[未来的技术 - HTML5]]></title>
    <link href="http://heeween.github.io/blog/2015-03-29-html5chang-yong-kuang-jia/"/>
    <updated>2015-03-29T09:30:00+08:00</updated>
    <id>http://heeween.github.io/blog/html5chang-yong-kuang-jia</id>
    <content type="html"><![CDATA[<h5>1. 什么是HTML5?&lt;html+5></h5>

<p>  1> 2014年才定制完HTML5的标准，历时8年
  2> 移动先行
   * HTML3,HTML4只为PC设计、没有考虑手机页面展示，移动互联网前几年才兴起
   （如果要新增一些功能、特性，首先考虑手机上能不能适用）</p>

<h5>2. HTML5的优势</h5>

<p>  1> 跨平台 利用HTML5编写的（*UI界面）代码能运行在所有拥有浏览器的平台
  2> HTML5的运行平台：浏览器
  3> 但是HTML5不能完成一些特定的功能，比如：拍照(ImagePickerController)、访问相册&hellip;.
   &lt;需要调用OC的控制器modal和dismiss>
   * iOS中用UIWebView来加载HTML
     &lt;有些公司的代码只有一个webView></p>

<h5>3、如何使用HTML5?</h5>

<p>  1> 自己编写大量的HTML5
  2> 使用现成的HTML5框架&lt;用很少的代码实现比如UIButton、UILabel等控件>
   <em>sencha - touch
   </em>jquery -mobile
   *phoneGap</p>

<p> 展示HTML5的案例&mdash;-jquery-mobile
  1>先在网页中展示，拉大、拉小，重点突出框架随着页面大小的变化而做出自适应；（dataPicker、listView）展示一些特效，教如何拷贝
  2>在模拟器中展示，知识点：网页应用  通过百度新闻网页版和手机版，突出完全可以用HTML5做出一套跨平台的应用（有些公司也在研究，看看哪些东西可以用HTML5来做）</p>

<h5>4.手机App的开发模式（从要不要使用HTML5）</h5>

<p>1> 原生（纯OC）
   目前大多数
2> 纯HTML5
   比较少
3> 原生 + HTML5 （UIWebView）
   原生与系统无缝结合。HTML5需要跨平台，考虑很多因素，性能提升不上去（但是HTML5的标准制定下来，其性能有了质的改变，当然对比而言，还不如原生。很多公司开始探讨用这种方式来开发）
   *HTML在性能上不如原生：点击UIButton, HTML5：点击事件传递给应用程序&mdash;》window &mdash;》webView &mdash;》UIButton
   最明显的差距：响应速度
   HTML5:不需要太注重用户体验、功能太复杂的、开发成本太高的。。。</p>

<h5>5、为什么要学习HTML5?</h5>

<p>1> 未来的一种趋势
2> 增加面试、开发竞争力
   拿andriod的对比举例
   安卓的：学习java、服务器&mdash;> HTML5</p>

<p>强调HTML5只需要了解，大部分公司的HTML5代码都不是自己写，我们只需要看懂</p>

<h4>6、HTML5开发工具</h4>

<p>1> andriod: eclipse、 Android studio
2> iOS: Xcode
3> HTML5:
* eclipse、MyEclipse（后台喜爱）
* DreamWaver(美工喜爱、网页三剑客:DreamWave、Flash、FireWork &mdash;》 Adobe )
* sublime text(前端喜爱、大神编辑器，可以装各种插件、配色完美)
* WebStorm(前端喜爱，默认集成了各种插件)
《安装WebStorm》
注意：准备java环境下载</p>

<h4>7、HTML的基本语法</h4>

<p>3> a 标签，
   a是超链接标签
   herf：是链接地址
   *体验不好，有些网站会另外打开一个窗口
   target=&ldquo;_blank"：新开一个网页</p>

<p>4> input标签
  * 在网页中展示
  * 在模拟器中展示
  * 特殊点：没有结束标签 区分：如果里面不要放东西，则不需要结束</p>

<p>5> input中常见的样式，用type引出
    <input type="color">
    <input type="checkbox">
    <input type="radio">
    <input type="range">
    <input type="date"></p>

<p>6> input中的value属性
   placeHold:请输入用户名</p>

<p>7> br 标签 换行&lt;不需要结束></p>

<p>8> img 标签
* 本地路径  &mdash;-引出协议：http ftp   file  跨域的问题
* 相对路径和绝对路径<br/>
  相对路径：从当前文件入手去找这个图片文件  （加一个文件夹用于区分）
  绝对路径：右击&ndash;>复制图片网址</p>

<p>9> div 标签
div非常灵活</p>

<div>122121212112</div>


<p>div和h比较像，但是有区别
&ndash;再加</p>

<div>122121212112</div>


<div>122121212112</div>


<div>122121212112  放入其他的控件</div>


<p>div就是一个容器，没有更多才华的容器</p>

<p>div 和 h 标签的区别
div:非常纯洁的容器，什么都没有，一块未雕琢的玉，我们想怎么做都可以，个性化定制
关于更多的标签，。。。。</p>

<h4>8、CSS的基本使用</h4>

<p>  1>行内样式
    <em>单值属性
    </em>复合属性
    <div>my-div</div>
    <span>my-span</span></p>

<pre><code>&lt;div style="color: red;" border: 10px dashed green&gt;my-div&lt;/div&gt;
&lt;span style="background-color: red; border:..."&gt;my-span&lt;/span&gt;
</code></pre>

<p>  如果有多个div，就需要使用页面样式
  *行内属性的缺点：
  a.无法给多个标签加样式（不能重用）；
  b.会扰乱HTML代码《HTML代码是内容和框架，过多的样式会让人很难理解》</p>

<p>  2>页内样式
    假如有一个需求：所有div红色，所有p蓝色
    第一种写法：
    <div style="color: red;">11111111</div>
    <div style="color: red;">333333333</div>
    <p style="color: green;">22222222</p>
    <p style="color: green;">444444444</p>
    虽然可以完成,但是有缺点：不能复用
       <style>
          div{
            color:green;
          }
          p{
            color:yellow;
          }
       </style>
    第二种写法：
    优点：充分的复用</p>

<pre><code>有些样式，在网站中很多网页中都是相同的，供多个网页使用引出外部样式
用PPT:
3&gt; 外部样式
新建test.css文件
div{
  color:red;
  ..
}
&lt;link herf="" rel=""&gt;


总结行内样式、页内样式和外部样式的的区别：
- 在业内样式中，引入外部样式
- 加入行内样式
1. 效果叠加
2. 就近原则
这些思想就可以运用到iOS中，编程的最高境界是：一理通百理融

总结css的三种样式：
*注意点：语法、顺序要规范
</code></pre>

<h5>9、CSS的选择器</h5>

<ol>
<li>CSS的两大核心
1> 属性:通过属性复杂的组合才能做出漂亮的东西
2> 选择器：通过选择器筛选符合条件的标签来增加样式
代码内容：
div{
  color: red;
}
p {
  color: blue;
}
span{
  color: yellow;
}</li>
</ol>


<p>   <div>11111</div>
   <p>222222</p>
   <span>3333333</span></p>

<p>  <em>有很多选择器，像div、p、span就是标签选择器
  &mdash;通过ppt对照讲解
  </em>标签选择器
  *类选择器</p>

<p>  2.假如有一个需求 根据不同的类名设置不同的样式
   <div>11111</div>
   <p>222222</p>
   <span>3333333</span>
   <h2>44444444444</h2></p>

<p>   <div class="main">11111</div>
   <p class="second">222222</p>
   <span  class="main">3333333</span>
   <h2  class="sencond">44444444444</h2></p>

<p>   &mdash;&ndash;>这样用标签选择器是办不到，是不是要用类选择器？</p>

<pre><code>.main{

     color: red;
 }
 .second{

     color: green;
 }
</code></pre>

<p>  <!--类选择器--> 可以有多个属性，加tom属性
     .tom{</p>

<pre><code>     color: black;
 }
</code></pre>

<p>  前面会覆盖后面。
   <div class="main tom">11111</div>
   <p class="second">222222</p>
   <span class="main">3333333</span>
   <h2 class="second">44444444444</h2>
  - id 如果有两个标签的id一样，会提示错误 id是唯一的</p>

<pre><code> 并列选择器
 符合选择器
 后代选择器
 相邻选择器
 属性选择器
</code></pre>

<h4>10、CSS选择器的优先级别</h4>

<p>  1 常见的标签
  * div、span、a、ul、li、input</p>

<p>  2 CSS语法
     2大核心
     <em>属性：编写怎样的样式
     </em>选择器：给谁添加样式</p>

<pre><code> 较为复杂的选择器
 *div, .high:并列选择器，div或者class="high"的标签
 *div.high:复合选择器，class="high"的div标签
 *div .high:后代选择器, div中所有class=“high”的后代标签（所有直接、间接的）
 *div &gt; .high:直接后代选择器，div中所有class=“high”的直接后代标签（不包括间接的）
 *div + high:相邻兄弟选择器，相邻兄弟选择器，跟div互为兄弟，且class= "high"
</code></pre>

<p> 3.CSS中的优先级
   1> 在style中设置三个div样式，知识点：同级别中 就近原则
      div{
         color:red;
      }
      div{
         color:blue;
      }
      div{
         color:yellow;
      }
      <div>1111</div>
   2> 在style中设置标签选择器、类选择器
      * 一个类选择器  一个标签选择器
      * 两个类选择器  一个标签选择器
      * 复合选择器  标签+id   类+类
         div#cat</p>

<pre><code> 不同级别中  优先级不相等；
 优先级一样的选择器，写在后面的会覆盖前面的
 针对性越强的选择器（范围越小），优先级越高   

id选择器 &gt; 类选择器 &gt; 标签选择器

选择器的权值

对应代码  标注权值

3&gt; important
在 div中 加入important 和 行内样式做比较， 突出important的重要性
</code></pre>

<h3>11、标签的类型</h3>

<ol>
<li><p>块级标签
行内标签
行内-块级标签</p></li>
</ol>


<p> <span>1111111</span>
 <span>2222222</span>
 <span>3333333</span></p>

<p> <div>111111111</div>
 <div>222222222</div>
 <div>333333333</div></p>

<p> <em>块级标签：独占一行，能随时改变宽度和高度
 -即使右边有很多空白，也不显示内容
 </em>行内标签：尺寸跟随内容，但不能改变尺寸
 - 改变宽度和高度，不好使
 - 增加内容，刷新
 *行内-块级标签：
 input 改变宽度和高度</p>

<p>2.display
- 很多人喜欢用div结合display来使用
 *none</p>

<p> *block</p>

<p> <em>inline
 用div结合 inline讲解
 </em>inline-block</p>

<p> 用span 结合 block讲解
 *inline-block</p>

<p> 3 居中
 div{
    background-color:red;
    width:200px;
    height:100px;
    <!--水平居中-->
    text-align:center;
    <!--垂直居中-->
    line-height:100px;
    <!--用于更复杂的情况-->
    vertical-align:middle;
 }</p>

<p> <div>1111111</div>
  让文字水平居中和垂直居中
  text-align:center;
  line-hieght:100px;
  vertical-align:middle;</p>

<p>```</p>

<h3>12、html5框架</h3>

<p>bootStrap</p>

<p>bootStrap:封装了很多好用的类，</p>

<p>1.input class =&ldquo;form-control&rdquo;
2.button class=&ldquo;btn btn-danger&rdquo;
  button class=&ldquo;btn btn-success&rdquo;
  button class=&ldquo;btn btn-warning&rdquo;
<em>如何在框架的基础上加一些自己的东西
3.<div class="panel panel-danger">
     <div class= "panel-heading"></div>
     <div class = "panel-body"></div>
  </div>
</em>加一些行内样式</p>

<ol>
<li><p><span class="badge">4</span></p></li>
<li><p>bootStrap集成图片&mdash;-》字体图片
一次性打包，web开发，所有的资源都在服务器
<i>888888</i>
文字不会失真</p></li>
<li><p>.min.css  .css 的区别
压缩文件大小</p></li>
</ol>


<h3>13、 JS语法</h3>

<p>1.介绍javascript，动态的添加一些东西
  js写服务器代码&mdash;NodeJS
  js以前是不行的,因为没有解析器。利用Google的V8的引擎开发了NodeJS
  js写服务器代码也是很有前景的</p>

<p>3、JS的编写形式
  用js写一个helloWord
  alert(&ldquo;hello world&rdquo;)</p>

<p>  console.log(&lsquo;hello world&rsquo;)
  比较alter和console,后者更利于调试：</p>

<p>4、js的基本语法
* 数据类型
* 函数
* 对象
&mdash;&ndash;创建代码
(1)<br/>
var age = 10; //number
var money = 10.5; // number
var name = &ldquo;jack&rdquo;; // string
var name2 = &lsquo;rose&rsquo;; // boolean
*推荐使用单引号
 <button onclick = "alter("10")">
 var result = true; // true false
* 可以不写var</p>

<p>打印类型，加深印象：
console.log(typeof age)</p>

<p>(2)字符串的拼接<br/>
 var prefix = &lsquo;I am&rsquo;;
 var name = &lsquo;jack&rsquo;
 var str = prefix + name + &lsquo;sb&rsquo; + 20;</p>

<p>(3) 字符串与数字拼接
 出题：
  var str1 = 10 + 10 + &lsquo;10&rsquo;;
  var str2 = &lsquo;10&rsquo; + 10 + 10;
  var str3 = &lsquo;10&rsquo; + （10 + 10）
  var str4 =  10 + &lsquo;10&rsquo; + &lsquo;10&rsquo;
  注意点：运算从左往右，任何类型与字符串相加都是字符串类型</p>

<p>（4）数组
  var names = []; // 比较下js和oc和java的数组区别
  var names = [10, 20, &lsquo;jack&rsquo;, 10.8, true, false];
  console.log(names.length)
  console.log(names[0])
  console.log(typeof names)</p>

<p>  var dog = {
     name : &lsquo;jack&rsquo;,
     age : 10
  };
  console.log(dog.name)
  console.log(dog.name + &lsquo;-&rsquo; + dog.age)</p>

<p>  var dog2 = {
     name : &lsquo;hhh&rsquo;,
     age  : 10,
     height : 1.55  (身高已经超过郭敬明了)
  };
  console.log &hellip;.</p>

<p>（5）函数
  *函数的定义格式
  function 函数名（参数列表）{
      // 函数体</p>

<pre><code>  函数没有返回类型
</code></pre>

<p>  }
  js中定义变量必须用var
  // 加法运算
  function sum(num1, num2){  // 参数列表不需要标明类型
     return num1 + num2
  }
  cosole.log(sum(1, 2))</p>

<p>  // 写一个万能的加法函数
   对比前面一个，突出新方法
   function sum(numbers){
      var count = 0;
      for(var i = 0; i &lt; numbers.count; i++){
          count += numbers[i];
      }
      return count;
   }
   // 改进版
   function sum(){ // arguments
      var count = 0;
      for (var i = 0; i &lt; arguments.length; i++){
         count += arguments[i];
      }<br/>
      return count
   }</p>

<p>   总结：js非常灵活，有很多写法，其他语言办不到</p>

<ul>
<li>数据类型
number:包括所有的数字（整数、小数）
boolean:正常取值（true 或者 false）
string: 字符串，可以用双引号和单引号引住内容（建议使用单引号）
object: 对象类型，（注意：数组[]也是对象类型）、{}</li>
<li>函数</li>
<li>对象</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入研究CADisplayLink和NSTimer]]></title>
    <link href="http://heeween.github.io/blog/2015-02-27-shen-ru-yan-jiu-cadisplaylinkhe-nstimer/"/>
    <updated>2015-02-27T12:05:24+08:00</updated>
    <id>http://heeween.github.io/blog/shen-ru-yan-jiu-cadisplaylinkhe-nstimer</id>
    <content type="html"><![CDATA[<h3>一、CADisplayLink</h3>

<p>CADisplayLink 是一个定时器对象可以让你的应用以与显示器的刷新界面相同的频率进行绘图。
应用如果想要创建 display link ，需要提供一个目标对象和一个当屏幕刷新时被调用的选择器方法。之后再将 display link 添加到主线程中。
一旦display link与主线程相关联，当屏幕内容需要被刷新的时候目标对象上的选择器方法就会被调用。目标对象可以读取 display link 的时间戳属性去检索下一帧被显示的画面。举个例子，一个执行它自己动画的应用会使用时间戳来确定在哪或者如何去在即将显示的画面中去展示它的对象。duration 属性提供了一个在两个画面之间的间隔时间。你可以在你的应用中使用这个值来估算显示的帧速率，近似下一帧被显示的时间，和调整行为，以便下一帧准备时间显示。
你的应用可以设置 paused 属性为YES来停止通知。同样的，如果你的应用不想用框架所提供的时间，你可以自己选择更慢的帧速率。已提供更慢但是一致的帧速率会比跳帧更加流畅，你可以通过改变 frameInterval 属性来改变改变画面的帧间隔（减少帧速率）。（每几帧调用一次，默认是1，如果是2，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 frameInterval 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。）
当你的应用想停止 display link ，它应该调用 invalidate 方法去从主线程中移除它并且消除与目标之间的关联。
CADisplayLink 不能被继承。</p>

<h3>二、NSTimer</h3>

<p>使用 NSTimer 类创建定时器对象或者仅仅是计时器。一个计时器每隔一定的时间间隔运行，然后触发，发送给目标对象一个特殊的消息。举例来说，你能够创建一个 NSTimer 对象发送给窗口一个消息，告诉它在一定时间间隔之后更新它自己。
定时器的运行需要结合着 run Loop。为了有效的使用一个定时器，你应该注意如何操作 run loops。请搜索在 Xcode Document 中 NSRunLoop 和 Threading Programming Guide 文章。特别注意，run loops 对它们的定时器保持着强引用，所以你不必去对加到 run loop 中的定时器保持强引用。
计时器并不是一个真正的时间机制；它只有在被添加到循环运行模式中的一种的时候才能触发，此时计时器的触发时间一旦过去就能检查出。由于对各种输入源的一个典型run loop 管理，对于一个定时器的时间间隔的有效解决方案被限制在50-100毫秒，如果一个定时器的触发经历了很长的一段时间或者在一个 run loop 的模式下没能监控到计时器，则这个计时器不会触发直到下一次 run loop 再次检测出这个计时器。因此，真正的计时器触发时间可以在预定触发时间之后的很长一段时间之后。可以看看这篇文章 Timer Tolerance。</p>

<h4>重复计时器与不可重复计时器</h4>

<p>你可以在创建计时器的时候指定它是可重复的还是不可重复的。一个不可重复的计时器只触发一次然后自动销毁，从而防止计时器再次触发。与之相反，一个可重复的计时器会重复在相同的 run loop 中触发。
一个可重复的计时器总是按照预先设计的触发时间执行它自己，而不是实际的出发时间。举个例子，如果一个计时器将在特定的时间每5秒钟之后触发，预定触发时间将总会落后于开始的5秒时间间隔，即使实际的触发时间被推迟。如果到目前为止触发时间被推迟了很久已经错过了一个或者几个触发的时间点，计时器会在下一个触发周期上只触发一次；触发后计时器重新安排，为下一次触发做准备。</p>

<h4>在 Run Loops 中预设定时器</h4>

<p>一个定时器对象只能同事被注册在一个 run loop 中，虽然它能被添加到这个 run loop 中的多个 run loop 模式中去。有三种方式创建：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">scheduledTimerWithTimeInterval</span><span class="p">:</span><span class="nl">invocation</span><span class="p">:</span><span class="nl">repeats</span><span class="p">:</span><span class="n">or</span>
</span><span class='line'><span class="nl">scheduledTimerWithTimeInterval</span><span class="p">:</span><span class="nl">target</span><span class="p">:</span><span class="nl">selector</span><span class="p">:</span><span class="nl">userInfo</span><span class="p">:</span><span class="nl">repeats</span><span class="p">:</span>
</span><span class='line'><span class="c1">// 类方法创建计时器，将它以默认的模式预设在当前的 run loop 中。</span>
</span><span class='line'><span class="nl">timerWithTimeInterval</span><span class="p">:</span><span class="nl">invocation</span><span class="p">:</span><span class="nl">repeats</span><span class="p">:</span><span class="n">or</span>
</span><span class='line'><span class="nl">timerWithTimeInterval</span><span class="p">:</span><span class="nl">target</span><span class="p">:</span><span class="nl">selector</span><span class="p">:</span><span class="nl">userInfo</span><span class="p">:</span><span class="nl">repeats</span><span class="p">:</span>
</span><span class='line'><span class="c1">// 类方法创建而没在 run loop 中预设它</span>
</span><span class='line'><span class="c1">//（创建之后，你必须将它添加到 run loop 中去，使用相应的 NSRunLoopaddTimer :forMode方法）</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 初始化计时器方法</span>
</span><span class='line'><span class="nl">initWithFireDate</span><span class="p">:</span><span class="nl">interval</span><span class="p">:</span><span class="nl">target</span><span class="p">:</span><span class="nl">selector</span><span class="p">:</span><span class="nl">userInfo</span><span class="p">:</span><span class="nl">repeats</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦在 run loop 中预设了定时器，定时器就会在制定的时间间隔触发直到它被销毁。一个不重复的计时器会在触发之后自动被销毁。然而，对于一个重复的计时器，你必须调用它的 invaludate 方法来销毁它。调用这个方法会请求在 当前的 run loop 中将计时器移除；所以，你应该总在创建计时器的线程中来调用 invalidate 方法来销毁它。销毁计时器之后会立即让它无效所以不会再影响 run loop。然后在移除方法之前或者晚一点点 run loop 会将计时器移除（与它的强引用一起移除），一旦被移除，计时器对象就不能再使用。
子类注意
不能够继承 NSTimer。</p>

<h4>Timer Tolerance：</h4>

<p>在 iOS 7之后，你能够为定时器指定一个公差。让系统在计时器触发的时候更加灵活的提升优化系统并增加它的存储和响应的能力。计时器会在预定的时间和预定时间加上公差时间之内触发计时器。计时器不会在预定时间之前触发。对于重复计时器为了避免漂移，下次的触发时间是根据原始的触发时间所估算出来而公差只应用于单次的触发时间。默认值是0，意味着没有更多的公差。系统有权利对于一些计算器使用少量的公差而不管公差的属性值是多少。
作为计时器的使用者，也许你有一个对于计时器最合适的公差。一般的经验是对于可重复的计时器设置公差至少有10%的时间间隔。即使少量的公差也将对应用程序产生重大的积极影响。系统可能为公差设置一个最大值。</p>

<h4>Toll-Free Bridging:</h4>

<p>在Core Foundation框架和 Foundation 框架中有许多种数据类型可以被互换着使用。这种能力，被称为： Toll-Free Bridging，意味着你能够使用相同的数据类型作为 Core Foundation 方法调用的参数也可以作为一个OC 方法传递的接受者。举个例子：NSLocale 相对 Core Foundation 是的互换的类型是 CFLocale。因此，如果一个方法中的参数是 NSLocale* 类型的时候，你可以传递过去一个 CFLocaleRef，并且如果方法中的参数是 CGLocaleRef 参数，你可以传递过去一个 NSLocale 实例。</p>

<h4>NSRunLoop：</h4>

<p>NSRunLoop 类的声明是对于输入源的面向对象的编程思想。一个NSRunloop 对象处理着来自窗口系统、NSPort 对象和 NSConnection 对象的像鼠标或键盘事件的输入源。一个 NSRunloop 对象也能够处理 NSTimer 事件。
你的应用不能够创建或者显示的管理 NSRunLoop 对象。每个 NSThread 对象，包括应用的主线程，都有一个 NSRunLoop 对象由于需求被自动的创建。如果你需要访问当前线程的 run loop，你可以对 currentRunLoop 类做操作。
注意从 NSRunLoop的角度来看， NSTimer 对象并不是“输入源” - 他们是一种特殊类型，这意味着它们不会在触发的时候引起 run loop 返回。
注意： NSRunLoop 类一般不认为是线程安全的，其方法应该只在其当前的线程上下文中被调用。你不能尝试在别的线程中去调用 NSRunLoop 对象的方法，如果这样做将导致无法预料的结果。
小结
在动画中最好用CADisplayLink，因为由于每秒的刷新频率较高，所以用它所生成的动画会显得非常流畅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维码制作]]></title>
    <link href="http://heeween.github.io/blog/2015-02-19-er-wei-ma-zhi-zuo/"/>
    <updated>2015-02-19T09:22:09+08:00</updated>
    <id>http://heeween.github.io/blog/er-wei-ma-zhi-zuo</id>
    <content type="html"><![CDATA[<h3>从iOS7开始集成了二维码的生成和读取功能</h3>

<h3>此前被广泛使用的zbarsdk目前不支持64位处理器</h3>

<p>0.导入CoreImage框架</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">/</span><span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">CoreImage</span><span class="o">/</span><span class="n">CoreImage</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>1.实例化二维码滤镜</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">CIFilter</span> <span class="o">*</span><span class="n">fiter</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CIFilter</span> <span class="nl">filterWithName</span><span class="p">:</span><span class="s">@&quot;CIQRCodeGenerator&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.恢复滤镜的默认属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">fiter</span> <span class="n">setDefaults</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.将字符串转换成NSData</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">inputData</span> <span class="o">=</span> <span class="s">@&quot;http://www.520it.com&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">inputData</span> <span class="nl">dataUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.通过KVO设置滤镜inputMessage数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">fiter</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">data</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;inputMessage&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.获得滤镜输出的图像</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">CIImage</span> <span class="o">*</span><span class="n">outputImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">fiter</span> <span class="n">outputImage</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.将CIImage转换成UIImage，并放大显示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">createNonInterpolatedUIImageFormCIImage</span><span class="p">:</span><span class="n">outputImage</span> <span class="nl">withSize</span><span class="p">:</span><span class="mi">200</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150819_1.png" alt="" /></p>

<h2>读取二维码需要导入AVFoundation框架</h2>

<h2>利用摄像头识别二维码中的内容(模拟器不行)</h2>

<p>1.实例化拍摄设备</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">AVCaptureDevice</span> <span class="o">*</span><span class="n">device</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVCaptureDevice</span> <span class="nl">defaultDeviceWithMediaType</span><span class="p">:</span><span class="n">AVMediaTypeVideo</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.设置输入设备</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">AVCaptureDeviceInput</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVCaptureDeviceInput</span> <span class="nl">deviceInputWithDevice</span><span class="p">:</span><span class="n">device</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.设置元数据输出</p>

<blockquote><p>3.1 实例化拍摄元数据输出</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">AVCaptureMetadataOutput</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVCaptureMetadataOutput</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>3.2 设置输出数据代理</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">output</span> <span class="nl">setMetadataObjectsDelegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">queue</span><span class="p">:</span><span class="n">dispatch_get_main_queue</span><span class="p">()];</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.添加拍摄会话</p>

<blockquote><p>4.1 实例化拍摄会话</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">AVCaptureSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVCaptureSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>4.2 添加会话输入</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">session</span> <span class="nl">addInput</span><span class="p">:</span><span class="n">input</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>4.3 添加会话输出</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">session</span> <span class="nl">addOutput</span><span class="p">:</span><span class="n">output</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>4.4 设置输出数据类型，需要将元数据输出添加到会话后，才能指定元数据类型，否则会报错</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">output</span> <span class="nl">setMetadataObjectTypes</span><span class="p">:</span><span class="l">@[</span><span class="n">AVMetadataObjectTypeQRCode</span><span class="l">]</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.视频预览图层</p>

<blockquote><p>5.1 实例化预览图层</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">AVCaptureVideoPreviewLayer</span> <span class="o">*</span><span class="n">preview</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVCaptureVideoPreviewLayer</span> <span class="nl">layerWithSession</span><span class="p">:</span><span class="n">session</span><span class="p">];</span>
</span><span class='line'><span class="n">preview</span><span class="p">.</span><span class="n">videoGravity</span> <span class="o">=</span> <span class="n">AVLayerVideoGravityResizeAspectFill</span><span class="p">;</span>
</span><span class='line'><span class="n">preview</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>5.2 将图层插入当前视图</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">insertSublayer</span><span class="p">:</span><span class="n">preview</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">previewLayer</span> <span class="o">=</span> <span class="n">preview</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.启动会话</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">_session</span> <span class="n">startRunning</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据解析模型设置的技巧]]></title>
    <link href="http://heeween.github.io/blog/2014-08-30-shu-ju-jie-xi-mo-xing-she-zhi-de-ji-qiao/"/>
    <updated>2014-08-30T11:50:05+08:00</updated>
    <id>http://heeween.github.io/blog/shu-ju-jie-xi-mo-xing-she-zhi-de-ji-qiao</id>
    <content type="html"><![CDATA[<h2>最直接的计算cell高度的方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">/</span><span class="err">#</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="err">代理方法</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nl">tableView</span><span class="p">:(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">heightForRowAtIndexPath</span><span class="p">:(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 取出帖子模型</span>
</span><span class='line'>    <span class="n">HYWTopic</span> <span class="o">*</span><span class="n">topic</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">topics</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 文字的最大尺寸</span>
</span><span class='line'>    <span class="bp">CGSize</span> <span class="n">maxSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">([</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">HYWTopicCellMargin</span><span class="p">,</span> <span class="n">MAXFLOAT</span><span class="p">);</span>
</span><span class='line'><span class="c1">//    CGFloat textH = [topic.text sizeWithFont:[UIFont systemFontOfSize:14] constrainedToSize:maxSize].height;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">textH</span> <span class="o">=</span> <span class="p">[</span><span class="n">topic</span><span class="p">.</span><span class="n">text</span> <span class="nl">boundingRectWithSize</span><span class="p">:</span><span class="n">maxSize</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSStringDrawingUsesLineFragmentOrigin</span> <span class="nl">attributes</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSFontAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">14</span><span class="p">]</span><span class="l">}</span> <span class="nl">context</span><span class="p">:</span><span class="nb">nil</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// cell的高度</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">cellH</span> <span class="o">=</span> <span class="n">HYWTopicCellTextY</span> <span class="o">+</span> <span class="n">textH</span> <span class="o">+</span> <span class="n">HYWTopicCellBottomBarH</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">HYWTopicCellMargin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cellH</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150729_1.png" alt="" /></p>

<h2>set方法和get方法都重写的话,成员变量也不会自动生成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">cellHeight</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_cellHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 文字的最大尺寸</span>
</span><span class='line'>        <span class="bp">CGSize</span> <span class="n">maxSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">([</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">HYWTopicCellMargin</span><span class="p">,</span> <span class="n">MAXFLOAT</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// 计算文字的高度</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">textH</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="nl">boundingRectWithSize</span><span class="p">:</span><span class="n">maxSize</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSStringDrawingUsesLineFragmentOrigin</span> <span class="nl">attributes</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSFontAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">14</span><span class="p">]</span><span class="l">}</span> <span class="nl">context</span><span class="p">:</span><span class="nb">nil</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// cell的高度</span>
</span><span class='line'>        <span class="n">_cellHeight</span> <span class="o">=</span> <span class="n">HYWTopicCellTextY</span> <span class="o">+</span> <span class="n">textH</span> <span class="o">+</span> <span class="n">HYWTopicCellBottomBarH</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">HYWTopicCellMargin</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_cellHeight</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150729_2.png" alt="" /></p>

<h2>MJExtension模型属性名和键值名替换可以统一处理,如果有规律的话</h2>

<p><img src="http://heeween.github.io/images/Snip20150729_4.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[popMenuController注意事项]]></title>
    <link href="http://heeween.github.io/blog/2014-08-10-popmenucontrollerzhu-yi-shi-xiang/"/>
    <updated>2014-08-10T11:03:34+08:00</updated>
    <id>http://heeween.github.io/blog/popmenucontrollerzhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<h2>popMenuController</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义控件封装的注意事项]]></title>
    <link href="http://heeween.github.io/blog/2014-08-08-zi-ding-yi-kong-jian-feng-zhuang-de-zhu-yi-shi-xiang/"/>
    <updated>2014-08-08T11:38:43+08:00</updated>
    <id>http://heeween.github.io/blog/zi-ding-yi-kong-jian-feng-zhuang-de-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<h2>封装控件时,一定要留意属性是否需要重写set方法,以便时时监听属性修改,添加修改之后的操作</h2>

<ul>
<li>而且还要考虑封装控件继承父类的属性也可能时时会被修改</li>
<li>注意父类的set方法,要使用super</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">/</span><span class="err">#</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="err">重写</span><span class="k">setter</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setPlaceholderColor</span><span class="p">:(</span><span class="bp">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="n">placeholderColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_placeholderColor</span> <span class="o">=</span> <span class="n">placeholderColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setPlaceholder</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">placeholder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_placeholder</span> <span class="o">=</span> <span class="p">[</span><span class="n">placeholder</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFont</span><span class="p">:(</span><span class="bp">UIFont</span> <span class="o">*</span><span class="p">)</span><span class="n">font</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setFont</span><span class="p">:</span><span class="n">font</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setText</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">text</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setText</span><span class="p">:</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setAttributedText</span><span class="p">:(</span><span class="bp">NSAttributedString</span> <span class="o">*</span><span class="p">)</span><span class="n">attributedText</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setAttributedText</span><span class="p">:</span><span class="n">attributedText</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>恰当的时候才会调用的一些系统方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="o">*</span> <span class="n">setNeedsDisplay</span><span class="err">方法</span> <span class="o">:</span> <span class="err">会在恰当的时刻自动调用</span><span class="nl">drawRect</span><span class="p">:</span><span class="err">方法</span>
</span><span class='line'> <span class="o">*</span> <span class="n">setNeedsLayout</span><span class="err">方法</span> <span class="o">:</span> <span class="err">会在恰当的时刻调用</span><span class="n">layoutSubviews</span><span class="err">方法</span>
</span><span class='line'> <span class="o">*</span> <span class="nl">initWithNibName</span><span class="p">:</span> <span class="nl">bundle</span><span class="p">:</span><span class="nb">nil</span> <span class="o">:</span> <span class="err">会在恰当的时刻加载</span><span class="n">nib</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textfield和TextView的区别]]></title>
    <link href="http://heeween.github.io/blog/2014-08-07-textfieldhe-textviewde-qu-bie/"/>
    <updated>2014-08-07T11:37:21+08:00</updated>
    <id>http://heeween.github.io/blog/textfieldhe-textviewde-qu-bie</id>
    <content type="html"><![CDATA[<h2>Textfield和TextView的区别</h2>

<ul>
<li><p>UITextField *textField默认的情况
1.只能显示一行文字
2.有占位文字</p></li>
<li><p>UITextView *textView默认的情况
2.能显示任意行文字
2.没有占位文字</p></li>
<li><p>文本输入控件,最终希望拥有的功能
1.能显示任意行文字
2.有占位文字</p></li>
<li><p>最终的方案:
1.继承自UITextView
2.在UITextView能显示任意行文字的基础上,增加"有占位文字"的功能</p></li>
</ul>


<h2>另类的一种监听textfield输入文字的方法</h2>

<ul>
<li>自定义一个textfield,重写- (void)insetText:(NSString *)text;</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 也能在这个方法中监听键盘的输入，比如输入“换行”</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertText:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">text</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">insertText</span><span class="p">:</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HYWLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>代理和通知的另一个区别</h2>

<ul>
<li>textview监听自己的占位文字变化,以便及时清除占位文字,如果使用代理,自己设置为自己的代理,监听文字改变,就会有这样的坏处&mdash;-外部用到这个对象时再设置代理时,就会覆盖自己的代理属性</li>
<li>所以textView自己应该监听自己文字变化的通知,这样自己的监听不会影响外部用textview的监听</li>
<li>所以代理更适合那些获得数据的情况,点击执行特定操作的情况,这样能保证数据的唯一性</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appearance统一设置主题的问题]]></title>
    <link href="http://heeween.github.io/blog/2014-08-06-appearancetong-%5B%3F%5D-she-zhi-zhu-ti-de-wen-ti/"/>
    <updated>2014-08-06T11:35:44+08:00</updated>
    <id>http://heeween.github.io/blog/appearancetong-[?]-she-zhi-zhu-ti-de-wen-ti</id>
    <content type="html"><![CDATA[<h2>通过APPearance修改navigationbarItem后,状态不会默认高亮,也不会马上渲染</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 设置item</span>
</span><span class='line'>    <span class="bp">UIBarButtonItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBarButtonItem</span> <span class="n">appearance</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// UIControlStateNormal</span>
</span><span class='line'>    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">itemAttrs</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>    <span class="n">itemAttrs</span><span class="p">[</span><span class="n">NSForegroundColorAttributeName</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blackColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">itemAttrs</span><span class="p">[</span><span class="n">NSFontAttributeName</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">17</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">item</span> <span class="nl">setTitleTextAttributes</span><span class="p">:</span><span class="n">itemAttrs</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这样设置以后导航栏的按钮点击高亮消失了,所以还需要再设置disable或者hilight的状态</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="c1">// UIControlStateDisabled</span>
</span><span class='line'>    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">itemDisabledAttrs</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>    <span class="n">itemDisabledAttrs</span><span class="p">[</span><span class="n">NSForegroundColorAttributeName</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">lightGrayColor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">item</span> <span class="nl">setTitleTextAttributes</span><span class="p">:</span><span class="n">itemDisabledAttrs</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateDisabled</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在post控制中设置默认不能点击</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="c1">// 默认不能点击</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置disable后发现,导航栏的按钮并不会显示默认的disable状态,这是因为通过appearance设置渲染延迟的问题,需要强制刷新控制</li>
</ul>


<p><img src="http://heeween.github.io/images/Snip20150805_2.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 强制刷新</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span> <span class="n">layoutIfNeeded</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150805_3.png" alt="" /></p>

<ul>
<li>另外,当导航栏用在NavigationController中, appearance设置才会生效</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webView加载进度条的不开放和常见解决方案]]></title>
    <link href="http://heeween.github.io/blog/2014-08-05-webviewjia-zai-jin-du-tiao-de-bu-kai-fang-he-chang-jian-jie-jue-fang-an/"/>
    <updated>2014-08-05T11:32:37+08:00</updated>
    <id>http://heeween.github.io/blog/webviewjia-zai-jin-du-tiao-de-bu-kai-fang-he-chang-jian-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h2>webView加载进度的实现&mdash;APP所有加载进度都是假象</h2>

<p><img src="http://heeween.github.io/images/Snip20150803_10.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 将第三方框架设置为webView代理</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">progress</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NJKWebViewProgress</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">webView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">progress</span><span class="p">;</span>
</span><span class='line'><span class="k">__weak</span> <span class="k">typeof</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过给代理的blcok赋值,拿到progress进度进行赋值</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">progress</span><span class="p">.</span><span class="n">progressBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">float</span> <span class="n">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weakSelf</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">progress</span> <span class="o">=</span> <span class="n">progress</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">weakSelf</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="p">(</span><span class="n">progress</span> <span class="o">==</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 再设置第三方框架的代理为控制器,以便控制器还可以正常监听webview的代理方法</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">progress</span><span class="p">.</span><span class="n">webViewProxyDelegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// webview加载网络请求</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">loadRequest</span><span class="p">:[</span><span class="bp">NSURLRequest</span> <span class="nl">requestWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">url</span><span class="p">]]];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Button通过网络加载图片不能使用SDWebimage的&lt;UIImageView+WebCache.h>方法,否则图片不显示</h2>

<p><img src="http://heeween.github.io/images/Snip20150803_13.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 使用UIButton的分类方法,附近状态参数</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">sd_setImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">square</span><span class="p">.</span><span class="n">icon</span><span class="p">]</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_11.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modal出来的控制器再modal一个控制器的问题]]></title>
    <link href="http://heeween.github.io/blog/2014-08-05-bai-si-bu-de-jie-zong-jie-8yue-5ri/"/>
    <updated>2014-08-05T09:23:46+08:00</updated>
    <id>http://heeween.github.io/blog/bai-si-bu-de-jie-zong-jie-8yue-5ri</id>
    <content type="html"><![CDATA[<h2>modal出来的控制器再modal一个控制器的问题</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 如果是先弹出再消失当前控制器</span>
</span><span class='line'>
</span><span class='line'>                <span class="o">!</span><span class="n">completionBlock</span> <span class="o">?</span> <span class="o">:</span> <span class="n">completionBlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span> <span class="nl">dismissViewControllerAnimated</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">05</span> <span class="mi">09</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mf">54.949</span> <span class="mo">01</span><span class="o">-</span><span class="err">百思不得姐</span><span class="p">[</span><span class="mi">11162</span><span class="o">:</span><span class="mi">25568</span><span class="p">]</span> <span class="nl">Warning</span><span class="p">:</span> <span class="n">Attempt</span> <span class="n">to</span> <span class="n">present</span> <span class="o">&lt;</span><span class="nl">HYWPostWordViewController</span><span class="p">:</span> <span class="mh">0x7fba697714c0</span><span class="o">&gt;</span> <span class="n">on</span> <span class="o">&lt;</span><span class="nl">HYWTabBarController</span><span class="p">:</span> <span class="mh">0x7fba6944bce0</span><span class="o">&gt;</span> <span class="n">whose</span> <span class="n">view</span> <span class="n">is</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span> <span class="n">hierarchy</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 如果是先消失再弹出当前控制器</span>
</span><span class='line'>
</span><span class='line'>                <span class="o">!</span><span class="n">completionBlock</span> <span class="o">?</span> <span class="o">:</span> <span class="n">completionBlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span> <span class="nl">dismissViewControllerAnimated</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150805_1.png" alt="" /></p>

<ul>
<li>原因是互相引用,两个控制器都不会死
//                self.presentationController  // self - > postWordVc
//                postWord.presentingViewController   // postWord - > self</li>
</ul>


<h2>控制器View的宽度问题</h2>

<ul>
<li>如果控制器从xib或者storyboard中创建处理的,默认宽高是600*600;</li>
<li>如果控制器是代码创建的,view的宽高是屏幕宽高</li>
<li>如果再viewdidload里设置为屏幕宽度,显示出来可能会变得大概为100多的宽度,这又是为什么</li>
<li>因为view里的子控件默认是autoresizing的,一开始控制器view宽度是600,子控件设置为375,那么当显示出来后,子控件也会按照比例缩小</li>
<li>所以要设置为autoresizingnone属性</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[layer.cornerRadius性能问题及解决方案]]></title>
    <link href="http://heeween.github.io/blog/2014-08-04-layer-dot-cornerradiusxing-neng-wen-ti-ji-jie-jue-fang-an/"/>
    <updated>2014-08-04T11:30:42+08:00</updated>
    <id>http://heeween.github.io/blog/layer-dot-cornerradiusxing-neng-wen-ti-ji-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h2>圆角设置的性能问题layer.cornerRadius方法会造成程序卡顿,利用Quartz2D性能更好</h2>

<p><img src="http://heeween.github.io/images/Snip20150803_9.png" alt="" />
* C语言绘图方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">circleImage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// NO代表透明</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="nb">NO</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获得上下文</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加一个圆</span>
</span><span class='line'>    <span class="bp">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextAddEllipseInRect</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">rect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 裁剪</span>
</span><span class='line'>    <span class="n">CGContextClip</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将图片画上去</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">rect</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UIBezierPath绘图方式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">clipImage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1.开启位图上下文，跟图片尺寸一样大</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CGSize</span> <span class="n">imageSize</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">imageSize</span><span class="p">,</span> <span class="nb">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2.设置圆形裁剪区域，正切与图片</span>
</span><span class='line'>    <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2.2把路径设置为裁剪区域</span>
</span><span class='line'>    <span class="p">[</span><span class="n">path</span> <span class="n">addClip</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3.绘制图片</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">drawAtPoint</span><span class="p">:</span><span class="n">CGPointZero</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 4.从上下文中获取图片</span>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">clipImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 5.关闭上下文</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">clipImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让一个普通控件弹出menuController的步骤]]></title>
    <link href="http://heeween.github.io/blog/2014-08-03-bai-si-bu-de-jie-xiang-mu-geng-duo-zong-jie/"/>
    <updated>2014-08-03T21:50:10+08:00</updated>
    <id>http://heeween.github.io/blog/bai-si-bu-de-jie-xiang-mu-geng-duo-zong-jie</id>
    <content type="html"><![CDATA[<h2>状态栏修改的两种方式</h2>

<ul>
<li>iOS7之后默认infolist里View controller-based status bar appearance值为YES,默认的状态栏也为黑色,意思就是状态栏修改都交给每个控制器,每个控制器实现</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 让当前控制器对应的状态栏是白色</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nf">preferredStatusBarStyle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_1.png" alt="" /></p>

<ul>
<li>但是项目中登陆控制器需要显示之后,才修改为白色,所以就可以将infoplist中默认修改权改为NO,修改权还交给UIApplication,可以在控制器view显示后和销毁后修改两次</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">back</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">statusBarStyle</span> <span class="o">=</span> <span class="n">UIStatusBarStyleDefault</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">dismissViewControllerAnimated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">statusBarStyle</span> <span class="o">=</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_2.png" alt="" /></p>

<h2>让一个普通控件弹出menuController的步骤</h2>

<ul>
<li>给控件添加Tap手势</li>
<li>让label有资格成为第一响应者,</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canBecomeFirstResponder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_3.png" alt="" /></p>

<ul>
<li>label能执行哪些操作(比如copy, paste等等)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canPerformAction:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">action</span> <span class="nf">withSender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">action</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">cut</span><span class="p">:)</span> <span class="o">||</span> <span class="n">action</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="k">copy</span><span class="o">:</span><span class="p">)</span> <span class="o">||</span> <span class="n">action</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">paste</span><span class="p">:))</span> <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_4.png" alt="" /></p>

<ul>
<li>实现各种操作方法,要在label所在的控制器重实现</li>
</ul>


<p><img src="http://heeween.github.io/images/Snip20150803_5.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">cut:</span><span class="p">(</span><span class="bp">UIMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">menu</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 将自己的文字复制到粘贴板</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="k">copy</span><span class="o">:</span><span class="n">menu</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 清空文字</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">copy:</span><span class="p">(</span><span class="bp">UIMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">menu</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 将自己的文字复制到粘贴板</span>
</span><span class='line'>    <span class="bp">UIPasteboard</span> <span class="o">*</span><span class="n">board</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIPasteboard</span> <span class="n">generalPasteboard</span><span class="p">];</span>
</span><span class='line'>    <span class="n">board</span><span class="p">.</span><span class="n">string</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">paste:</span><span class="p">(</span><span class="bp">UIMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">menu</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 将粘贴板的文字 复制 到自己身上</span>
</span><span class='line'>    <span class="bp">UIPasteboard</span> <span class="o">*</span><span class="n">board</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIPasteboard</span> <span class="n">generalPasteboard</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">board</span><span class="p">.</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_7.png" alt="" /></p>

<ul>
<li>让label成为第一响应者</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 这里的self是label</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="n">becomeFirstResponder</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>显示UIMenuController,指定弹出的矩形框</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIMenuController</span> <span class="o">*</span><span class="n">menu</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIMenuController</span> <span class="n">sharedMenuController</span><span class="p">];</span>
</span><span class='line'><span class="c1">// targetRect: MenuController需要指向的矩形框</span>
</span><span class='line'><span class="c1">// targetView: targetRect会以targetView的左上角为坐标原点</span>
</span><span class='line'><span class="p">[</span><span class="n">menu</span> <span class="nl">setTargetRect</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">bounds</span> <span class="nl">inView</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="c1">// [menu setTargetRect:self.frame inView:self.superview];</span>
</span><span class='line'><span class="p">[</span><span class="n">menu</span> <span class="nl">setMenuVisible</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150803_6.png" alt="" /></p>

<ul>
<li>自定义menuController弹出的文字,添加item</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 添加MenuItem(点击item, 默认会调用控制器的方法)</span>
</span><span class='line'><span class="bp">UIMenuItem</span> <span class="o">*</span><span class="n">ding</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;顶&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">ding</span><span class="p">:)];</span>
</span><span class='line'><span class="bp">UIMenuItem</span> <span class="o">*</span><span class="n">replay</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;回复&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">replay</span><span class="p">:)];</span>
</span><span class='line'><span class="bp">UIMenuItem</span> <span class="o">*</span><span class="n">report</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;举报&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">report</span><span class="p">:)];</span>
</span><span class='line'><span class="n">menu</span><span class="p">.</span><span class="n">menuItems</span> <span class="o">=</span> <span class="l">@[</span><span class="n">ding</span><span class="p">,</span> <span class="n">replay</span><span class="p">,</span> <span class="n">report</span><span class="l">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>group样式TableView的Frame默认给Y值增加35</h2>

<p><img src="http://heeween.github.io/images/Snip20150803_8.png" alt="" /></p>

<ul>
<li>改回来的话,就在viewDidLoad方法中,修改TableView的contentInset</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 调整inset</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">contentInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="n">HYWTopicCellMargin</span> <span class="o">-</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多组表格网络请求加载失败可能引发的小问题]]></title>
    <link href="http://heeween.github.io/blog/2014-08-02-bai-si-bu-de-jie-xiang-mu-zong-jie/"/>
    <updated>2014-08-02T15:42:54+08:00</updated>
    <id>http://heeween.github.io/blog/bai-si-bu-de-jie-xiang-mu-zong-jie</id>
    <content type="html"><![CDATA[<h2>KVC的keypath下划线写不写都能找到</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 恢复帖子的top_cmt</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">saved_top_cmt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">topic</span><span class="p">.</span><span class="n">top_cmt</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">saved_top_cmt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">topic</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@0</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;_cellHeight&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150802_1.png" alt="" /></p>

<h2>MJExtension的无限映射,注意不要打全局断点,否则会卡住</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">replacedKeyFromPropertyName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="l">@{</span>
</span><span class='line'>             <span class="s">@&quot;small_image&quot;</span> <span class="o">:</span> <span class="s">@&quot;image0&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">@&quot;large_image&quot;</span> <span class="o">:</span> <span class="s">@&quot;image1&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">@&quot;middle_image&quot;</span> <span class="o">:</span> <span class="s">@&quot;image2&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">@&quot;ID&quot;</span> <span class="o">:</span> <span class="s">@&quot;id&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">@&quot;top_cmt&quot;</span> <span class="o">:</span> <span class="s">@&quot;top_cmt[0]&quot;</span> <span class="c1">//,</span>
</span><span class='line'><span class="c1">//             @&quot;qzone_uid&quot; : @&quot;top_cmt[0].user.qzone_uid&quot;</span>
</span><span class='line'>             <span class="l">}</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150802_4.png" alt="" /></p>

<h2>字符串是否为nil的判断</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">comment</span><span class="p">.</span><span class="n">voiceuri</span><span class="p">.</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">voiceButton</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">voiceButton</span> <span class="nl">setTitle</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%zd&#39;&#39;&quot;</span><span class="p">,</span> <span class="n">comment</span><span class="p">.</span><span class="n">voicetime</span><span class="p">]</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">voiceButton</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150802_5.png" alt="" /></p>

<h2>实现cell的分割线的小技巧</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">awakeFromNib</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UIImageView</span> <span class="o">*</span><span class="n">bgView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">bgView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;mainCellBackground&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">backgroundView</span> <span class="o">=</span> <span class="n">bgView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150802_7.png" alt="" /></p>

<h2>网络请求刷新更多数据,加载失败可能引发的小问题</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 结束之前的所有请求</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">manager</span><span class="p">.</span><span class="n">tasks</span> <span class="nl">makeObjectsPerformSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancel</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 页码</span>
</span><span class='line'><span class="bp">NSInteger</span> <span class="n">page</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">page</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 参数</span>
</span><span class='line'><span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="n">params</span><span class="p">[</span><span class="s">@&quot;a&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;dataList&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">params</span><span class="p">[</span><span class="s">@&quot;c&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;comment&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">params</span><span class="p">[</span><span class="s">@&quot;data_id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">topic</span><span class="p">.</span><span class="n">ID</span><span class="p">;</span>
</span><span class='line'><span class="n">params</span><span class="p">[</span><span class="s">@&quot;page&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="l">@(</span><span class="n">page</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'><span class="n">HYWComment</span> <span class="o">*</span><span class="n">cmt</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">latestComments</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="n">params</span><span class="p">[</span><span class="s">@&quot;lastcid&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmt</span><span class="p">.</span><span class="n">ID</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">manager</span> <span class="nl">GET</span><span class="p">:</span><span class="s">@&quot;http://api.budejie.com/api/api_open.php&quot;</span> <span class="nl">parameters</span><span class="p">:</span><span class="n">params</span> <span class="nl">success</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 最新评论</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">newComments</span> <span class="o">=</span> <span class="p">[</span><span class="n">HYWComment</span> <span class="nl">objectArrayWithKeyValuesArray</span><span class="p">:</span><span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;data&quot;</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">latestComments</span> <span class="nl">addObjectsFromArray</span><span class="p">:</span><span class="n">newComments</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 页码</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">page</span> <span class="o">=</span> <span class="n">page</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 刷新数据</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 控制footer的状态</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">total</span> <span class="o">=</span> <span class="p">[</span><span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;total&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">latestComments</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="n">total</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 全部加载完毕</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">footer</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 结束刷新状态</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">footer</span> <span class="n">endRefreshing</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="nl">failure</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">footer</span> <span class="n">endRefreshing</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150802_9.png" alt="" /></p>

<h2>递归找到所有window的scrollView</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">searchScrollViewInView:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">superview</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="n">superview</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果是scrollview, 滚动最顶部</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UIScrollView</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">CGPoint</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">subview</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">;</span>
</span><span class='line'>            <span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span> <span class="n">subview</span><span class="p">.</span><span class="n">contentInset</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subview</span> <span class="nl">setContentOffset</span><span class="p">:</span><span class="n">offset</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 继续查找子控件</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">searchScrollViewInView</span><span class="p">:</span><span class="n">subview</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150802_10.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook第三方框架pop动画]]></title>
    <link href="http://heeween.github.io/blog/2014-07-30-bai-si-bu-de-jie-xiang-mu-zong-jie/"/>
    <updated>2014-07-30T09:14:35+08:00</updated>
    <id>http://heeween.github.io/blog/bai-si-bu-de-jie-xiang-mu-zong-jie</id>
    <content type="html"><![CDATA[<h2>基于CADisplayLisk的Facebook第三方框架pop动画</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> pop和Core Animation的区别</span>
</span><span class='line'><span class="cm"> 1.Core Animation的动画只能添加到layer上</span>
</span><span class='line'><span class="cm"> 2.pop的动画能添加到任何对象</span>
</span><span class='line'><span class="cm"> 3.pop的底层并非基于Core Animation, 是基于CADisplayLink</span>
</span><span class='line'><span class="cm"> 4.Cora Animationd的动画仅仅是表象,并不会真正修改对象的frame和size等值</span>
</span><span class='line'><span class="cm"> 5.pop的动画实时修改对象的属性,真正的修改了对象的属性</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>基于pop做的各种绚丽动画,的示例程序&mdash;poping(太帅了) \ learnCube</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="nl">animationWithPropertyNamed</span><span class="p">:</span><span class="n">kPOPViewCenter</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 要添加动画的对象</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewAlpha</span> <span class="o">=</span> <span class="s">@&quot;view.alpha&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewBackgroundColor</span> <span class="o">=</span> <span class="s">@&quot;view.backgroundColor&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewBounds</span> <span class="o">=</span> <span class="n">kPOPLayerBounds</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewCenter</span> <span class="o">=</span> <span class="s">@&quot;view.center&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewFrame</span> <span class="o">=</span> <span class="s">@&quot;view.frame&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewScaleX</span> <span class="o">=</span> <span class="s">@&quot;view.scaleX&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewScaleXY</span> <span class="o">=</span> <span class="s">@&quot;view.scaleXY&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewScaleY</span> <span class="o">=</span> <span class="s">@&quot;view.scaleY&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewSize</span> <span class="o">=</span> <span class="n">kPOPLayerSize</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kPOPViewTintColor</span> <span class="o">=</span> <span class="s">@&quot;view.tintColor&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 动画从哪到哪,速度等属性</span>
</span><span class='line'>  <span class="n">anim</span><span class="p">.</span><span class="n">springBounciness</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 弹性</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">springSpeed</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 速度</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGPoint</span><span class="p">:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span> <span class="c1">// 从哪出发</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGPoint</span><span class="p">:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">)];</span> <span class="c1">// 到哪结束</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">beginTime</span> <span class="o">=</span> <span class="n">CACurrentMediaTime</span><span class="p">()</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 什么时候开始</span>
</span></code></pre></td></tr></table></div></figure>


<h2>tabBar弹出一个控制器的方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">publishClick</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 缺点:modal会让下面的控制器view移出窗口,但有时候下面view需要半透明化,并不想直接移出</span>
</span><span class='line'>    <span class="n">HYWPublishViewController</span> <span class="o">*</span><span class="n">publish</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HYWPublishViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">keyWindow</span><span class="p">.</span><span class="n">rootViewController</span> <span class="nl">presentViewController</span><span class="p">:</span><span class="n">publish</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 缺点:当前根控制器是tabBarcontroller,添加子控制器会影响tabBar的排布</span>
</span><span class='line'>    <span class="bp">UIViewController</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">keyWindow</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">root</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">publish</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">root</span> <span class="nl">addChildViewController</span><span class="p">:</span><span class="n">publish</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 解决方法,换成普通view添加到主窗口,但是点击事件会传到下面的view</span>
</span><span class='line'>    <span class="n">HYWPublishView</span> <span class="o">*</span><span class="n">publish</span> <span class="o">=</span> <span class="p">[</span><span class="n">HYWPublishView</span> <span class="n">publishView</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">keyWindow</span><span class="p">;</span>
</span><span class='line'>    <span class="n">publish</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">window</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">window</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">publish</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 更牛逼的做法,直接自定义window,完全独立一个window,响应事件也独立,任然还可以看到下面view</span>
</span><span class='line'>    <span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">window</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'>    <span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIColor</span> <span class="n">yellowColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent</span><span class="p">:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">window</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150730_1.png" alt="" />
<img src="http://heeween.github.io/images/Snip20150730_3.png" alt="" /></p>

<h2>iOS命名规范</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window_</span><span class="p">;</span> <span class="c1">// 全局变量</span>
</span><span class='line'><span class="bp">UIWindow</span> <span class="o">*</span><span class="n">_window</span><span class="p">;</span> <span class="c1">// 成员变量</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSStrin</span> <span class="o">*</span> <span class="k">const</span> <span class="n">HYWKeyVersion</span> <span class="o">=</span> <span class="s">@&quot;213984723784&quot;</span><span class="p">;</span> <span class="c1">// 普通变量</span>
</span></code></pre></td></tr></table></div></figure>


<h2>手动计算文字高度方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 文字的最大尺寸</span>
</span><span class='line'>    <span class="bp">CGSize</span> <span class="n">maxSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">([</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">HYWTopicCellMargin</span><span class="p">,</span> <span class="n">MAXFLOAT</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// 根据最大尺寸和字体,计算出size,取出高度,这个方法从7.0之后就被苹果废弃了NS_DEPRECATED_IOS(2_0, 7_0, </span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">textH</span> <span class="o">=</span> <span class="p">[</span><span class="n">topic</span><span class="p">.</span><span class="n">text</span> <span class="nl">sizeWithFont</span><span class="p">:[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">14</span><span class="p">]</span> <span class="nl">constrainedToSize</span><span class="p">:</span><span class="n">maxSize</span><span class="p">].</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 苹果推荐的算法, NSStringDrawingUsesLineFragmentOrigin属性</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">textH</span> <span class="o">=</span> <span class="p">[</span><span class="n">topic</span><span class="p">.</span><span class="n">text</span> <span class="nl">boundingRectWithSize</span><span class="p">:</span><span class="n">maxSize</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSStringDrawingUsesLineFragmentOrigin</span> <span class="nl">attributes</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSFontAttributeName</span> <span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">14</span><span class="p">]</span><span class="l">}</span> <span class="nl">context</span><span class="p">:</span><span class="nb">nil</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quartz实现image缩放的技巧]]></title>
    <link href="http://heeween.github.io/blog/2014-07-29-bai-si-bu-de-jie-xiang-mu-zong-jie/"/>
    <updated>2014-07-29T11:55:38+08:00</updated>
    <id>http://heeween.github.io/blog/bai-si-bu-de-jie-xiang-mu-zong-jie</id>
    <content type="html"><![CDATA[<h2>利用Quartz实现image缩放的技巧</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="c1">// 开启图形上下文</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">topic</span><span class="p">.</span><span class="n">pictureF</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将下载完的image对象绘制到图形上下文</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">width</span> <span class="o">=</span> <span class="n">topic</span><span class="p">.</span><span class="n">pictureF</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">height</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">image</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获得图片</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 结束图形上下文</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150729_13.png" alt="" /></p>

<h2>图片拉伸属性的区别</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIViewContentModeScaleAspectFit</span><span class="p">,</span>      <span class="c1">// contents scaled to fit with fixed aspect. remainder is transparent</span>
</span><span class='line'><span class="c1">// 宽且高都要缩放到iamgeview框中才可以</span>
</span><span class='line'><span class="n">UIViewContentModeScaleAspectFill</span><span class="p">,</span>     <span class="c1">// contents scaled to fill with fixed aspect. some portion of content may be clipped.</span>
</span><span class='line'><span class="c1">// 宽或者高缩放到imageView框中就可以</span>
</span></code></pre></td></tr></table></div></figure>


<h2>写入手机相册image的方法</h2>

<p><img src="http://heeween.github.io/images/Snip20150729_9.png" alt="" />
<img src="http://heeween.github.io/images/Snip20150729_10.png" alt="" /></p>

<h3>制作动画一般只用frame</h3>

<p><img src="http://heeween.github.io/images/Snip20150729_14.png" alt="" /></p>

<h2>弹簧效果的类</h2>

<p><img src="http://heeween.github.io/images/Snip20150729_15.png" alt="" /></p>

<h2>直接获得字符串的扩展名和变为小写的方法</h2>

<p><img src="http://heeween.github.io/images/Snip20150729_5.png" alt="" /></p>

<p><img src="http://heeween.github.io/images/Snip20150729_6.png" alt="" /></p>

<p><img src="http://heeween.github.io/images/Snip20150729_7.png" alt="" /></p>

<h2>SDWebimage自动解析image显示gif</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTopic:</span><span class="p">(</span><span class="n">HYWTopic</span> <span class="o">*</span><span class="p">)</span><span class="nv">topic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_topic</span> <span class="o">=</span> <span class="n">topic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置图片</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="nl">sd_setImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">topic</span><span class="p">.</span><span class="n">large_image</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://heeween.github.io/images/Snip20150729_3.png" alt="" /></p>

<h2>SDwebimage下载任务的单独性</h2>

<p><img src="http://heeween.github.io/images/Snip20150729_12.png" alt="" /></p>

<h2>xib中不可以对imageview添加子控件</h2>

<p><img src="http://heeween.github.io/images/Snip20150729_8.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textfield魔法效果实现]]></title>
    <link href="http://heeween.github.io/blog/2014-07-26-gao-fang-bai-si-bu-de-jie-zong-jie/"/>
    <updated>2014-07-26T21:24:27+08:00</updated>
    <id>http://heeween.github.io/blog/gao-fang-bai-si-bu-de-jie-zong-jie</id>
    <content type="html"><![CDATA[<h2>修改每个控制器的状态栏样式</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_1.png" alt="" /></p>

<h2>设置button的圆角还需要同时设置clipstobound</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_2.png" alt="" /></p>

<h2>寻找系统方法的步骤</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_3.png" alt="" /></p>

<h2>有override注释的方法意味着是官方推荐改写以实现特定功能的</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_4.png" alt="" /></p>

<h2>实现富文本,需要在上下文中调用字符串的draw方法</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_5.png" alt="" /></p>

<h2>运行时可以找到某些系统的属性,然后使用KVC修改</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_8.png" alt="" /></p>

<h2>textfield被点击后会调用setHightlighed方法</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_9.png" alt="" /></p>

<h2>textfield成为和取消第一响应者会调用以下两个方法,可以在这两个方法添加个性化功能</h2>

<p><img src="http://heeween.github.io/images/Snip20150726_11.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
